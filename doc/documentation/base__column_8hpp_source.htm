<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Database Implementation Techniques Programming Task SoSe2013: base_column.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Database Implementation Techniques Programming Task SoSe2013
   
   </div>
   <div id="projectbrief">DB2 Programming Task SoSe2013</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">base_column.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="base__column_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="preprocessor">#pragma once</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span><span class="comment">//STL includes</span>
<a name="l00004"></a>00004 <span class="preprocessor">#include &lt;typeinfo&gt;</span>
<a name="l00005"></a>00005 <span class="comment">//boost includes</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;boost/archive/binary_oarchive.hpp&gt;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;boost/archive/binary_iarchive.hpp&gt;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;boost/serialization/binary_object.hpp&gt;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;boost/serialization/vector.hpp&gt;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;boost/serialization/list.hpp&gt;</span>
<a name="l00011"></a>00011 <span class="comment">//CoGaDB includes</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;<a class="code" href="global__definitions_8hpp.htm">core/global_definitions.hpp</a>&gt;</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="keyword">namespace </span>CoGaDB{
<a name="l00015"></a>00015 <span class="comment">/* \brief a PositionList is an STL vector of TID values*/</span>
<a name="l00016"></a><a class="code" href="namespaceCoGaDB.htm#a3903511755e2c745226394b999ddb8a8">00016</a> <span class="keyword">typedef</span> std::vector&lt;TID&gt; <a class="code" href="namespaceCoGaDB.htm#a3903511755e2c745226394b999ddb8a8">PositionList</a>;
<a name="l00017"></a>00017 <span class="comment">/* \brief a PositionListPtr is a a references counted smart pointer to a PositionList object*/</span>
<a name="l00018"></a><a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">00018</a> <span class="keyword">typedef</span> shared_pointer_namespace::shared_ptr&lt;PositionList&gt; <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a>;
<a name="l00019"></a>00019 <span class="comment">/* \brief a PositionListPair is an STL pair consisting of two PositionListPtr objects</span>
<a name="l00020"></a>00020 <span class="comment"> *  \details This type is returned by binary operators, e.g., joins*/</span>
<a name="l00021"></a><a class="code" href="namespaceCoGaDB.htm#ad25a5198c5815e9eddddc65c1f156b2e">00021</a> <span class="keyword">typedef</span> std::pair&lt;PositionListPtr,PositionListPtr&gt; <a class="code" href="namespaceCoGaDB.htm#ad25a5198c5815e9eddddc65c1f156b2e">PositionListPair</a>;
<a name="l00022"></a>00022 <span class="comment">/* \brief a PositionListPairPtr is a a references counted smart pointer to a PositionListPair object*/</span>
<a name="l00023"></a><a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">00023</a> <span class="keyword">typedef</span> shared_pointer_namespace::shared_ptr&lt;PositionListPair&gt; <a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">PositionListPairPtr</a>;
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="keyword">class </span>Table; <span class="comment">//forward declaration</span>
<a name="l00026"></a>00026 
<a name="l00038"></a><a class="code" href="classCoGaDB_1_1ColumnBase.htm">00038</a> <span class="keyword">class </span><a class="code" href="classCoGaDB_1_1ColumnBase.htm" title="This class represents a generic column, is the base class for all column classes and allows a uniform...">ColumnBase</a>{
<a name="l00039"></a>00039         <span class="keyword">public</span>:
<a name="l00041"></a><a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d">00041</a>         <span class="keyword">typedef</span> shared_pointer_namespace::shared_ptr&lt;ColumnBase&gt; <a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a>;
<a name="l00042"></a>00042         <span class="comment">/***************** constructors and destructor *****************/</span>
<a name="l00043"></a>00043         <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a7952cc631416caa4c03523daeb66954e">ColumnBase</a>(<span class="keyword">const</span> std::string&amp; name, <a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> db_type);
<a name="l00044"></a>00044         <span class="keyword">virtual</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a496bb224058ea81d70617fa851308306">~ColumnBase</a>();
<a name="l00045"></a>00045         <span class="comment">/***************** methods *****************/</span>   
<a name="l00048"></a>00048         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#adbb7a3275d4e1c5634b5af969f82cfae" title="appends a value new_Value to end of column">insert</a>(<span class="keyword">const</span> boost::any&amp; new_Value)=0;
<a name="l00051"></a>00051         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a791400c0d1a3b91ef3fa8ca3f37956b9" title="updates the value on position tid with a value new_Value">update</a>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid, <span class="keyword">const</span> boost::any&amp; new_Value)=0;
<a name="l00054"></a>00054         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a791400c0d1a3b91ef3fa8ca3f37956b9" title="updates the value on position tid with a value new_Value">update</a>(<a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> tids, <span class="keyword">const</span> boost::any&amp; new_value) = 0;             
<a name="l00057"></a>00057         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <span class="keyword">remove</span>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid)=0;
<a name="l00061"></a>00061         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <span class="keyword">remove</span>(<a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> tid)=0;     
<a name="l00064"></a>00064         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#aaa5a675946ca7ec7b44b843a76927745" title="deletes all values stored in the column">clearContent</a>()=0;
<a name="l00068"></a>00068         <span class="keyword">virtual</span> <span class="keyword">const</span> boost::any <span class="keyword">get</span>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid)=0; <span class="comment">//not const, because operator [] does not provide const return type and the child classes rely on []</span>
<a name="l00070"></a>00070 <span class="comment"></span>        <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#ac4bb2af029ab94ba3689cfd1864e4e6c" title="prints the content of a column">print</a>() <span class="keyword">const</span> throw()=0;
<a name="l00072"></a>00072         virtual <span class="keywordtype">size_t</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a0101453631de8ff59ffc24eed760d81d" title="returns the number of values (rows) in a column">size</a>() const throw()=0;
<a name="l00074"></a>00074         virtual <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#ab7f43b8bc8bb5956df6e2b5256193bc3" title="returns the size in bytes the column consumes in main memory">getSizeinBytes</a>() const throw()=0;
<a name="l00077"></a>00077         virtual const <a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a44ce38ba1b6f9d0f23f780ca42123284" title="virtual copy constructor">copy</a>() const=0;
<a name="l00078"></a>00078         <span class="comment">/***************** relational operations on Columns which return a PositionListPtr/PositionListPairPtr *****************/</span>
<a name="l00081"></a>00081         virtual const <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#ab03331430756cc4080800cf4eb1cf4ae" title="sorts a column w.r.t. a SortOrder">sort</a>(<a class="code" href="namespaceCoGaDB.htm#a4da9b0c7d2a04facb7e4834b8cb86aa5">SortOrder</a> order=<a class="code" href="namespaceCoGaDB.htm#a4da9b0c7d2a04facb7e4834b8cb86aa5aac7a3b8f2752e8a54ea32049c0d8de36">ASCENDING</a>)= 0; 
<a name="l00084"></a>00084         virtual const <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a943315677651ad20b91400a40cca2e08" title="filters the values of a column according to a filter condition consisting of a comparison value and a...">selection</a>(const boost::any&amp; value_for_comparison, const <a class="code" href="namespaceCoGaDB.htm#aeea69c893912bd4994fd616b189db4d4">ValueComparator</a> comp)= 0;
<a name="l00088"></a>00088         virtual const <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a3368c3e420a2d0456183007b1edde238" title="filters the values of a column in parallel according to a filter condition consisting of a comparison...">parallel_selection</a>(const boost::any&amp; value_for_comparison, const <a class="code" href="namespaceCoGaDB.htm#aeea69c893912bd4994fd616b189db4d4">ValueComparator</a> comp, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> number_of_threads) = 0;
<a name="l00091"></a>00091         virtual const <a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">PositionListPairPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a71ef9d91dace96d0ce47ed9cdab552d0" title="joins two columns using the hash join algorithm">hash_join</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> join_column)=0;
<a name="l00094"></a>00094         virtual const <a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">PositionListPairPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a8b1b5878495d33efe00e163e9f64b449" title="joins two columns using the sort merge join algorithm">sort_merge_join</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> join_column)=0;
<a name="l00097"></a>00097         virtual const <a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">PositionListPairPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#acde1f36d5fe42e09ae4561eebee1b438" title="joins two columns using the nested loop join algorithm">nested_loop_join</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> join_column)=0;
<a name="l00098"></a>00098         <span class="comment">/***************** column algebra operations *****************/</span> 
<a name="l00101"></a>00101         virtual <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a320ad0009caf49680ecaf4c062fba500" title="adds constant to column">add</a>(const boost::any&amp; new_Value) = 0;
<a name="l00104"></a>00104         virtual <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a320ad0009caf49680ecaf4c062fba500" title="adds constant to column">add</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> column) = 0;
<a name="l00107"></a>00107         virtual <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#add9deb21f77a3e6d0a785018f7c5ad8c" title="substracts constant from column">minus</a>(const boost::any&amp; new_Value) = 0;
<a name="l00110"></a>00110         virtual <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#add9deb21f77a3e6d0a785018f7c5ad8c" title="substracts constant from column">minus</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> column) = 0;       
<a name="l00113"></a>00113         virtual <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a08c2ef362738b6ce3f4eba429911b7e2" title="multiply constant with column">multiply</a>(const boost::any&amp; new_Value) = 0;
<a name="l00116"></a>00116         virtual <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a08c2ef362738b6ce3f4eba429911b7e2" title="multiply constant with column">multiply</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> column) = 0;
<a name="l00119"></a>00119         virtual <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#acb6c8321b6451c2bef58936e623b328c" title="devide values in column by a constant">division</a>(const boost::any&amp; new_Value) = 0; 
<a name="l00122"></a>00122         virtual <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#acb6c8321b6451c2bef58936e623b328c" title="devide values in column by a constant">division</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> column) = 0;    
<a name="l00123"></a>00123         <span class="comment">/***************** persistency operations *****************/</span>            
<a name="l00126"></a>00126         virtual <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a6c4176f8f8d93e7694e0a52284bd98cf" title="store a column on the disc">store</a>(const std::<span class="keywordtype">string</span>&amp; path) = 0;
<a name="l00130"></a>00130         virtual <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a84c32d3ed8b6570e3c9d190a85dfdfbd" title="load column from disc">load</a>(const std::<span class="keywordtype">string</span>&amp; path) = 0;
<a name="l00133"></a>00133         <span class="comment">/***************** misc operations *****************/</span>   
<a name="l00134"></a>00134         virtual <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a15a93d403eea75c1050d73b708c7c7cd" title="use this method to determine whether the column is materialized or a Lookup Column">isMaterialized</a>() const  throw() = 0;
<a name="l00137"></a>00137         virtual <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a007460a4371ac5a9d21de9584e117e88" title="use this method to determine whether the column is materialized or a Lookup Column">isCompressed</a>() const  throw() = 0; 
<a name="l00139"></a>00139         virtual const std::type_info&amp; <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a025b63767aae6e1ab2c772689a4a0033" title="returns type information of internal values">type</a>() const throw() = 0;
<a name="l00141"></a>00141         <a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#abb0aa5bd957c60e6162e37ea81506b12" title="returns database type of column (as defined in &quot;SQL&quot; statement)">getType</a>() const throw();
<a name="l00144"></a>00144         const std::<span class="keywordtype">string</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a7ef499aa8df1cc0b11195cf4b3b5028d" title="returns attribute name of column">getName</a>() const throw();
<a name="l00145"></a>00145 
<a name="l00146"></a>00146         protected:
<a name="l00148"></a><a class="code" href="classCoGaDB_1_1ColumnBase.htm#adde5ec5902be1d18cc625cc41526e241">00148</a>         std::<span class="keywordtype">string</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#adde5ec5902be1d18cc625cc41526e241" title="attribute name of the column">name_</a>;
<a name="l00150"></a><a class="code" href="classCoGaDB_1_1ColumnBase.htm#a8ef4e55c2d56db9cdb2fc8266c982691">00150</a>         <a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a8ef4e55c2d56db9cdb2fc8266c982691" title="database type of the column">db_type_</a>;
<a name="l00151"></a>00151 <span class="comment">//      Table&amp; table_;</span>
<a name="l00152"></a>00152 };
<a name="l00153"></a>00153 
<a name="l00155"></a><a class="code" href="namespaceCoGaDB.htm#a3d7ce6ae5ca4381f2b4f1db23f982c5d">00155</a> typedef <a class="code" href="classCoGaDB_1_1ColumnBase.htm" title="This class represents a generic column, is the base class for all column classes and allows a uniform...">ColumnBase</a>::<a class="code" href="namespaceCoGaDB.htm#a3d7ce6ae5ca4381f2b4f1db23f982c5d" title="makes a smart pointer to a ColumnBase Object visible in the namespace">ColumnPtr</a> <a class="code" href="namespaceCoGaDB.htm#a3d7ce6ae5ca4381f2b4f1db23f982c5d" title="makes a smart pointer to a ColumnBase Object visible in the namespace">ColumnPtr</a>;
<a name="l00156"></a>00156 
<a name="l00157"></a><a class="code" href="namespaceCoGaDB.htm#a5386261e3f8b4d8e88366bb51388b889">00157</a> typedef std::vector&lt;ColumnPtr&gt; <a class="code" href="namespaceCoGaDB.htm#a5386261e3f8b4d8e88366bb51388b889">ColumnVector</a>;
<a name="l00158"></a><a class="code" href="namespaceCoGaDB.htm#a32399dcb6ea0b0b2b1aa97418c975a13">00158</a> typedef shared_pointer_namespace::shared_ptr&lt;ColumnVector&gt; <a class="code" href="namespaceCoGaDB.htm#a32399dcb6ea0b0b2b1aa97418c975a13">ColumnVectorPtr</a>;
<a name="l00159"></a>00159 
<a name="l00161"></a>00161 const ColumnPtr <a class="code" href="namespaceCoGaDB.htm#a5fdf7fd25a58db5bd904ce735a9212b7" title="Column factory function, creates an empty materialized column.">createColumn</a>(<a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#a025b63767aae6e1ab2c772689a4a0033" title="returns type information of internal values">type</a>, const std::<span class="keywordtype">string</span>&amp; name);
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 }; <span class="comment">//end namespace CogaDB</span>
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 
<a name="l00166"></a>00166 <span class="comment">//extend boost namespace to add serialization feature to my own types</span>
<a name="l00167"></a><a class="code" href="namespaceboost.htm">00167</a> namespace boost {
<a name="l00168"></a><a class="code" href="namespaceboost_1_1serialization.htm">00168</a> <span class="keyword">namespace </span>serialization {
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 <span class="keyword">template</span>&lt;<span class="keyword">class</span> Archive&gt;
<a name="l00171"></a><a class="code" href="namespaceboost_1_1serialization.htm#ab43be156f83f13afa80c13898f040acd">00171</a> <span class="keywordtype">void</span> <a class="code" href="namespaceboost_1_1serialization.htm#ab43be156f83f13afa80c13898f040acd">serialize</a>(Archive &amp; ar, std::pair&lt;CoGaDB::AttributeType,std::string&gt; &amp; pair, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ) <span class="comment">//version)</span>
<a name="l00172"></a>00172 {
<a name="l00173"></a>00173         
<a name="l00174"></a>00174     ar &amp; pair.first;
<a name="l00175"></a>00175     ar &amp; pair.second;
<a name="l00176"></a>00176     
<a name="l00177"></a>00177 }
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 } <span class="comment">// namespace serialization</span>
<a name="l00180"></a>00180 } <span class="comment">// namespace boost</span>
<a name="l00181"></a>00181 
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Tue Apr 30 2013 14:01:03 for Database Implementation Techniques Programming Task SoSe2013 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
