<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Database Implementation Techniques Programming Task SoSe2013: unittest.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Database Implementation Techniques Programming Task SoSe2013
   
   </div>
   <div id="projectbrief">DB2 Programming Task SoSe2013</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">unittest.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="unittest_8cpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00003"></a>00003 <span class="preprocessor">#include &lt;<a class="code" href="global__definitions_8hpp.htm">core/global_definitions.hpp</a>&gt;</span>
<a name="l00004"></a>00004 <span class="preprocessor">#include &lt;<a class="code" href="base__column_8hpp.htm">core/base_column.hpp</a>&gt;</span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;<a class="code" href="column__base__typed_8hpp.htm">core/column_base_typed.hpp</a>&gt;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;<a class="code" href="column_8hpp.htm">core/column.hpp</a>&gt;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;<a class="code" href="compressed__column_8hpp.htm">core/compressed_column.hpp</a>&gt;</span>
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;<a class="code" href="dictionary__compressed__column_8hpp.htm">compression/dictionary_compressed_column.hpp</a>&gt;</span>
<a name="l00010"></a>00010 
<a name="l00011"></a>00011 <span class="keyword">using namespace </span>CoGaDB;
<a name="l00012"></a>00012 
<a name="l00013"></a><a class="code" href="unittest_8cpp.htm#a96906d250ad58e9b759159c07522c606">00013</a> <span class="keywordtype">bool</span> <a class="code" href="main_8cpp.htm#a7fc104b1e4c91f5fbd065c0fc53d2291">unittest</a>(boost::shared_ptr&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;int&gt;</a> &gt; col){
<a name="l00014"></a>00014         std::cout &lt;&lt; <span class="stringliteral">&quot;RUN Unittest for Column with BaseType ColumnBaseTyped&lt;int&gt; &gt;&quot;</span> &lt;&lt; std::endl;
<a name="l00015"></a>00015 
<a name="l00016"></a>00016         std::vector&lt;int&gt; reference_data(100);
<a name="l00017"></a>00017 
<a name="l00018"></a>00018    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00019"></a>00019                 reference_data[i]=rand()%100;
<a name="l00020"></a>00020    }
<a name="l00021"></a>00021 
<a name="l00022"></a>00022         <span class="comment">/****** BASIC INSERT TEST ******/</span>
<a name="l00023"></a>00023         std::cout &lt;&lt; <span class="stringliteral">&quot;BASIC INSERT TEST: Filling column with data...&quot;</span>; <span class="comment">// &lt;&lt; std::endl; </span>
<a name="l00024"></a>00024         <span class="comment">//col-&gt;insert(reference_data.begin(),reference_data.end());  </span>
<a name="l00025"></a>00025    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00026"></a>00026                 col-&gt;insert(reference_data[i]);
<a name="l00027"></a>00027    }    
<a name="l00028"></a>00028 
<a name="l00029"></a>00029         <span class="keywordflow">if</span>(reference_data.size()!=col-&gt;size()){ 
<a name="l00030"></a>00030                 std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: invalid data size&quot;</span> &lt;&lt; std::endl;
<a name="l00031"></a>00031                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00032"></a>00032         }
<a name="l00033"></a>00033 
<a name="l00034"></a>00034   <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00035"></a>00035                 <span class="keywordflow">if</span>(reference_data[i]!=(*col)[i]){ 
<a name="l00036"></a>00036                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: read invalid data&quot;</span> &lt;&lt; std::endl;
<a name="l00037"></a>00037                         std::cout &lt;&lt; <span class="stringliteral">&quot;Column: &#39;&quot;</span> &lt;&lt; col-&gt;getName() 
<a name="l00038"></a>00038                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; TID: &#39;&quot;</span>&lt;&lt; i 
<a name="l00039"></a>00039                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Expected Value: &#39;&quot;</span> &lt;&lt; reference_data[i] 
<a name="l00040"></a>00040                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Actual Value: &#39;&quot;</span> &lt;&lt; (*col)[i] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> 
<a name="l00041"></a>00041                                                  &lt;&lt; std::endl;          
<a name="l00042"></a>00042                         std::cerr &lt;&lt; <span class="stringliteral">&quot;BASIC INSERT TEST FAILED!&quot;</span> &lt;&lt; std::endl;  
<a name="l00043"></a>00043                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00044"></a>00044                 }
<a name="l00045"></a>00045   }
<a name="l00046"></a>00046         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00047"></a>00047         <span class="comment">/****** VIRTUAL COPY CONSTRUCTOR TEST ******/</span>
<a name="l00048"></a>00048         std::cout &lt;&lt; <span class="stringliteral">&quot;VIRTUAL COPY CONSTRUCTOR TEST...&quot;</span>;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050         <span class="comment">//boost::shared_ptr&lt;DictionaryCompressedColumn&lt;int&gt; &gt; compressed_col (new DictionaryCompressedColumn&lt;int&gt;(&quot;compressed int column&quot;,INT));</span>
<a name="l00051"></a>00051         <span class="comment">//compressed_col-&gt;insert(reference_data.begin(),reference_data.end()); </span>
<a name="l00052"></a>00052  
<a name="l00053"></a>00053         <a class="code" href="namespaceCoGaDB.htm#a3d7ce6ae5ca4381f2b4f1db23f982c5d" title="makes a smart pointer to a ColumnBase Object visible in the namespace">ColumnPtr</a> copy=col-&gt;copy();
<a name="l00054"></a>00054                 <span class="keywordflow">if</span>(!copy){ 
<a name="l00055"></a>00055                         std::cerr &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;VIRTUAL COPY CONSTRUCTOR TEST FAILED!&quot;</span> &lt;&lt; std::endl; 
<a name="l00056"></a>00056                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00057"></a>00057                 }       
<a name="l00058"></a>00058                 <span class="keywordtype">bool</span> result = *(boost::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;int&gt;</a> &gt;(copy))==*(boost::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;int&gt;</a> &gt;(col));
<a name="l00059"></a>00059                 <span class="keywordflow">if</span>(!result){ 
<a name="l00060"></a>00060                         std::cerr &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;VIRTUAL COPY CONSTRUCTOR TEST FAILED!&quot;</span> &lt;&lt; std::endl; 
<a name="l00061"></a>00061                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00062"></a>00062                 }       
<a name="l00063"></a>00063         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00064"></a>00064         <span class="comment">/****** UPDATE TEST ******/</span>
<a name="l00065"></a>00065         <a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid=rand()%100;
<a name="l00066"></a>00066         <span class="keywordtype">int</span> new_value=rand()%100;
<a name="l00067"></a>00067         std::cout &lt;&lt; <span class="stringliteral">&quot;UPDATE TEST: Update value on Position &#39;&quot;</span> &lt;&lt; tid &lt;&lt; <span class="stringliteral">&quot;&#39; to new value &#39;&quot;</span> &lt;&lt; new_value &lt;&lt; <span class="stringliteral">&quot;&#39;...&quot;</span>; <span class="comment">// &lt;&lt; std::endl;</span>
<a name="l00068"></a>00068 
<a name="l00069"></a>00069         reference_data[tid]=new_value;
<a name="l00070"></a>00070 
<a name="l00071"></a>00071         col-&gt;update(tid,new_value);
<a name="l00072"></a>00072 
<a name="l00073"></a>00073   <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00074"></a>00074                 <span class="keywordflow">if</span>(reference_data[i]!=(*col)[i]){ 
<a name="l00075"></a>00075                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: read invalid data&quot;</span> &lt;&lt; std::endl;
<a name="l00076"></a>00076                         std::cout &lt;&lt; <span class="stringliteral">&quot;Column: &#39;&quot;</span> &lt;&lt; col-&gt;getName() 
<a name="l00077"></a>00077                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; TID: &#39;&quot;</span>&lt;&lt; i 
<a name="l00078"></a>00078                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Expected Value: &#39;&quot;</span> &lt;&lt; reference_data[i] 
<a name="l00079"></a>00079                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Actual Value: &#39;&quot;</span> &lt;&lt; (*col)[i] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> 
<a name="l00080"></a>00080                                                  &lt;&lt; std::endl;          
<a name="l00081"></a>00081                         std::cerr &lt;&lt; <span class="stringliteral">&quot;UPDATE TEST FAILED!&quot;</span> &lt;&lt; std::endl;        
<a name="l00082"></a>00082                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00083"></a>00083                 }
<a name="l00084"></a>00084   }
<a name="l00085"></a>00085         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00086"></a>00086         <span class="comment">/****** DELETE TEST ******/</span>
<a name="l00087"></a>00087         {
<a name="l00088"></a>00088         <a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid=rand()%100;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090         std::cout &lt;&lt; <span class="stringliteral">&quot;DELETE TEST: Delete value on Position &#39;&quot;</span> &lt;&lt; tid &lt;&lt; <span class="stringliteral">&quot;&#39;...&quot;</span>; <span class="comment">// &lt;&lt; std::endl;</span>
<a name="l00091"></a>00091 
<a name="l00092"></a>00092         reference_data.erase(reference_data.begin()+tid);
<a name="l00093"></a>00093 
<a name="l00094"></a>00094         col-&gt;remove(tid);
<a name="l00095"></a>00095 
<a name="l00096"></a>00096   <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00097"></a>00097                 <span class="keywordflow">if</span>(reference_data[i]!=(*col)[i]){ 
<a name="l00098"></a>00098                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: read invalid data&quot;</span> &lt;&lt; std::endl;
<a name="l00099"></a>00099                         std::cout &lt;&lt; <span class="stringliteral">&quot;Column: &#39;&quot;</span> &lt;&lt; col-&gt;getName() 
<a name="l00100"></a>00100                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; TID: &#39;&quot;</span>&lt;&lt; i 
<a name="l00101"></a>00101                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Expected Value: &#39;&quot;</span> &lt;&lt; reference_data[i] 
<a name="l00102"></a>00102                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Actual Value: &#39;&quot;</span> &lt;&lt; (*col)[i] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> 
<a name="l00103"></a>00103                                                  &lt;&lt; std::endl;          
<a name="l00104"></a>00104                         std::cerr &lt;&lt; <span class="stringliteral">&quot;DELETE TEST FAILED!&quot;</span> &lt;&lt; std::endl;        
<a name="l00105"></a>00105                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00106"></a>00106                 }
<a name="l00107"></a>00107   }
<a name="l00108"></a>00108         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00109"></a>00109         }
<a name="l00110"></a>00110         <span class="comment">/****** STORE AND LOAD TEST ******/</span>
<a name="l00111"></a>00111         {
<a name="l00112"></a>00112         std::cout &lt;&lt; <span class="stringliteral">&quot;STORE AND LOAD TEST: store column data on disc and load it...&quot;</span>; <span class="comment">// &lt;&lt; std::endl;</span>
<a name="l00113"></a>00113         col-&gt;store(<span class="stringliteral">&quot;data/&quot;</span>);
<a name="l00114"></a>00114 
<a name="l00115"></a>00115         col-&gt;clearContent();
<a name="l00116"></a>00116         <span class="keywordflow">if</span>(col-&gt;size()!=0){
<a name="l00117"></a>00117                 std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! &#39;col-&gt;size()&#39; returned non zero after call to &#39;col-&gt;clearContent()&#39;\nTEST FAILED&quot;</span> &lt;&lt; std::endl;
<a name="l00118"></a>00118                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00119"></a>00119         }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121         <span class="comment">//boost::shared_ptr&lt;Column&lt;int&gt; &gt; col2 (new Column&lt;int&gt;(&quot;int column&quot;,INT));</span>
<a name="l00122"></a>00122         col-&gt;load(<span class="stringliteral">&quot;data/&quot;</span>);
<a name="l00123"></a>00123 
<a name="l00124"></a>00124   <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00125"></a>00125                 <span class="keywordflow">if</span>(reference_data[i]!=(*col)[i]){ 
<a name="l00126"></a>00126                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: read invalid data&quot;</span> &lt;&lt; std::endl;
<a name="l00127"></a>00127                         std::cout &lt;&lt; <span class="stringliteral">&quot;Column: &#39;&quot;</span> &lt;&lt; col-&gt;getName() 
<a name="l00128"></a>00128                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; TID: &#39;&quot;</span>&lt;&lt; i 
<a name="l00129"></a>00129                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Expected Value: &#39;&quot;</span> &lt;&lt; reference_data[i] 
<a name="l00130"></a>00130                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Actual Value: &#39;&quot;</span> &lt;&lt; (*col)[i] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> 
<a name="l00131"></a>00131                                                  &lt;&lt; std::endl;          
<a name="l00132"></a>00132                         std::cerr &lt;&lt; <span class="stringliteral">&quot;STORE AND LOAD TEST FAILED!&quot;</span> &lt;&lt; std::endl;        
<a name="l00133"></a>00133                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00134"></a>00134                 }
<a name="l00135"></a>00135   }
<a name="l00136"></a>00136         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00137"></a>00137   }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139         
<a name="l00140"></a>00140 
<a name="l00141"></a>00141   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00142"></a>00142 }
<a name="l00143"></a>00143 
<a name="l00144"></a><a class="code" href="unittest_8cpp.htm#ae769cd3a8322eedb11b5570159e58af3">00144</a> <span class="keywordtype">bool</span> <a class="code" href="main_8cpp.htm#a7fc104b1e4c91f5fbd065c0fc53d2291">unittest</a>(boost::shared_ptr&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;float&gt;</a> &gt; col){
<a name="l00145"></a>00145         std::cout &lt;&lt; <span class="stringliteral">&quot;RUN Unittest for Column with BaseType ColumnBaseTyped&lt;float&gt; &gt;&quot;</span> &lt;&lt; std::endl;
<a name="l00146"></a>00146 
<a name="l00147"></a>00147         std::vector&lt;float&gt; reference_data(100);
<a name="l00148"></a>00148 
<a name="l00149"></a>00149    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00150"></a>00150                 reference_data[i]=float(rand()%10000)/100;
<a name="l00151"></a>00151    }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 <span class="comment">//      for(unsigned int i=0;i&lt;reference_data.size();i++){</span>
<a name="l00154"></a>00154 <span class="comment">//              std::cout &lt;&lt; reference_data[i] &lt;&lt; std::endl;</span>
<a name="l00155"></a>00155 <span class="comment">//      }</span>
<a name="l00156"></a>00156 
<a name="l00157"></a>00157         <span class="comment">/****** BASIC INSERT TEST ******/</span>
<a name="l00158"></a>00158         std::cout &lt;&lt; <span class="stringliteral">&quot;BASIC INSERT TEST: Filling column with data...&quot;</span>; <span class="comment">// &lt;&lt; std::endl; </span>
<a name="l00159"></a>00159         <span class="comment">//col-&gt;insert(reference_data.begin(),reference_data.end());  </span>
<a name="l00160"></a>00160    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00161"></a>00161                 col-&gt;insert(reference_data[i]);
<a name="l00162"></a>00162    }    
<a name="l00163"></a>00163         <span class="comment">//col-&gt;print();</span>
<a name="l00164"></a>00164         <span class="keywordflow">if</span>(reference_data.size()!=col-&gt;size()){ 
<a name="l00165"></a>00165                 std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: invalid data size&quot;</span> &lt;&lt; std::endl;
<a name="l00166"></a>00166                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00167"></a>00167         }
<a name="l00168"></a>00168 
<a name="l00169"></a>00169   <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00170"></a>00170                 <span class="keywordflow">if</span>(reference_data[i]!=(*col)[i]){ 
<a name="l00171"></a>00171                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: read invalid data&quot;</span> &lt;&lt; std::endl;
<a name="l00172"></a>00172                         std::cout &lt;&lt; <span class="stringliteral">&quot;Column: &#39;&quot;</span> &lt;&lt; col-&gt;getName() 
<a name="l00173"></a>00173                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; TID: &#39;&quot;</span>&lt;&lt; i 
<a name="l00174"></a>00174                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Expected Value: &#39;&quot;</span> &lt;&lt; reference_data[i] 
<a name="l00175"></a>00175                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Actual Value: &#39;&quot;</span> &lt;&lt; (*col)[i] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> 
<a name="l00176"></a>00176                                                  &lt;&lt; std::endl;          
<a name="l00177"></a>00177                         std::cerr &lt;&lt; <span class="stringliteral">&quot;BASIC INSERT TEST FAILED!&quot;</span> &lt;&lt; std::endl;  
<a name="l00178"></a>00178                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00179"></a>00179                 }
<a name="l00180"></a>00180   }
<a name="l00181"></a>00181         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00182"></a>00182         <span class="comment">/****** VIRTUAL COPY CONSTRUCTOR TEST ******/</span>
<a name="l00183"></a>00183         std::cout &lt;&lt; <span class="stringliteral">&quot;VIRTUAL COPY CONSTRUCTOR TEST...&quot;</span>;
<a name="l00184"></a>00184 
<a name="l00185"></a>00185         <span class="comment">//boost::shared_ptr&lt;DictionaryCompressedColumn&lt;float&gt; &gt; compressed_col (new DictionaryCompressedColumn&lt;float&gt;(&quot;compressed int column&quot;,FLOAT));</span>
<a name="l00186"></a>00186         <span class="comment">//compressed_col-&gt;insert(reference_data.begin(),reference_data.end()); </span>
<a name="l00187"></a>00187  
<a name="l00188"></a>00188         <a class="code" href="namespaceCoGaDB.htm#a3d7ce6ae5ca4381f2b4f1db23f982c5d" title="makes a smart pointer to a ColumnBase Object visible in the namespace">ColumnPtr</a> copy=col-&gt;copy();
<a name="l00189"></a>00189                 <span class="keywordflow">if</span>(!copy){ 
<a name="l00190"></a>00190                         std::cerr &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;VIRTUAL COPY CONSTRUCTOR TEST FAILED!&quot;</span> &lt;&lt; std::endl; 
<a name="l00191"></a>00191                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00192"></a>00192                 }       
<a name="l00193"></a>00193                 <span class="keywordtype">bool</span> result = *(boost::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;float&gt;</a> &gt;(copy))==*(boost::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;float&gt;</a> &gt;(col));
<a name="l00194"></a>00194                 <span class="keywordflow">if</span>(!result){ 
<a name="l00195"></a>00195                         std::cerr &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;VIRTUAL COPY CONSTRUCTOR TEST FAILED!&quot;</span> &lt;&lt; std::endl; 
<a name="l00196"></a>00196                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00197"></a>00197                 }       
<a name="l00198"></a>00198         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00199"></a>00199         <span class="comment">/****** UPDATE TEST ******/</span>
<a name="l00200"></a>00200         <a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid=rand()%100;
<a name="l00201"></a>00201         <span class="keywordtype">float</span> new_value=float(rand()%10000)/100;
<a name="l00202"></a>00202         std::cout &lt;&lt; <span class="stringliteral">&quot;UPDATE TEST: Update value on Position &#39;&quot;</span> &lt;&lt; tid &lt;&lt; <span class="stringliteral">&quot;&#39; to new value &#39;&quot;</span> &lt;&lt; new_value &lt;&lt; <span class="stringliteral">&quot;&#39;...&quot;</span>; <span class="comment">// &lt;&lt; std::endl;</span>
<a name="l00203"></a>00203 
<a name="l00204"></a>00204         reference_data[tid]=new_value;
<a name="l00205"></a>00205 
<a name="l00206"></a>00206         col-&gt;update(tid,new_value);
<a name="l00207"></a>00207 
<a name="l00208"></a>00208   <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00209"></a>00209                 <span class="keywordflow">if</span>(reference_data[i]!=(*col)[i]){ 
<a name="l00210"></a>00210                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: read invalid data&quot;</span> &lt;&lt; std::endl;
<a name="l00211"></a>00211                         std::cout &lt;&lt; <span class="stringliteral">&quot;Column: &#39;&quot;</span> &lt;&lt; col-&gt;getName() 
<a name="l00212"></a>00212                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; TID: &#39;&quot;</span>&lt;&lt; i 
<a name="l00213"></a>00213                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Expected Value: &#39;&quot;</span> &lt;&lt; reference_data[i] 
<a name="l00214"></a>00214                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Actual Value: &#39;&quot;</span> &lt;&lt; (*col)[i] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> 
<a name="l00215"></a>00215                                                  &lt;&lt; std::endl;          
<a name="l00216"></a>00216                         std::cerr &lt;&lt; <span class="stringliteral">&quot;UPDATE TEST FAILED!&quot;</span> &lt;&lt; std::endl;        
<a name="l00217"></a>00217                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00218"></a>00218                 }
<a name="l00219"></a>00219   }
<a name="l00220"></a>00220         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00221"></a>00221         <span class="comment">/****** DELETE TEST ******/</span>
<a name="l00222"></a>00222         {
<a name="l00223"></a>00223         <a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid=rand()%100;
<a name="l00224"></a>00224 
<a name="l00225"></a>00225         std::cout &lt;&lt; <span class="stringliteral">&quot;DELETE TEST: Delete value on Position &#39;&quot;</span> &lt;&lt; tid &lt;&lt; <span class="stringliteral">&quot;&#39;...&quot;</span>; <span class="comment">// &lt;&lt; std::endl;</span>
<a name="l00226"></a>00226 
<a name="l00227"></a>00227         reference_data.erase(reference_data.begin()+tid);
<a name="l00228"></a>00228 
<a name="l00229"></a>00229         col-&gt;remove(tid);
<a name="l00230"></a>00230 
<a name="l00231"></a>00231   <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00232"></a>00232                 <span class="keywordflow">if</span>(reference_data[i]!=(*col)[i]){ 
<a name="l00233"></a>00233                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: read invalid data&quot;</span> &lt;&lt; std::endl;
<a name="l00234"></a>00234                         std::cout &lt;&lt; <span class="stringliteral">&quot;Column: &#39;&quot;</span> &lt;&lt; col-&gt;getName() 
<a name="l00235"></a>00235                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; TID: &#39;&quot;</span>&lt;&lt; i 
<a name="l00236"></a>00236                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Expected Value: &#39;&quot;</span> &lt;&lt; reference_data[i] 
<a name="l00237"></a>00237                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Actual Value: &#39;&quot;</span> &lt;&lt; (*col)[i] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> 
<a name="l00238"></a>00238                                                  &lt;&lt; std::endl;          
<a name="l00239"></a>00239                         std::cerr &lt;&lt; <span class="stringliteral">&quot;DELETE TEST FAILED!&quot;</span> &lt;&lt; std::endl;        
<a name="l00240"></a>00240                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00241"></a>00241                 }
<a name="l00242"></a>00242   }
<a name="l00243"></a>00243         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00244"></a>00244         }
<a name="l00245"></a>00245         <span class="comment">/****** STORE AND LOAD TEST ******/</span>
<a name="l00246"></a>00246         {
<a name="l00247"></a>00247         std::cout &lt;&lt; <span class="stringliteral">&quot;STORE AND LOAD TEST: store column data on disc and load it...&quot;</span>; <span class="comment">// &lt;&lt; std::endl;</span>
<a name="l00248"></a>00248         col-&gt;store(<span class="stringliteral">&quot;data/&quot;</span>);
<a name="l00249"></a>00249 
<a name="l00250"></a>00250         col-&gt;clearContent();
<a name="l00251"></a>00251         <span class="keywordflow">if</span>(col-&gt;size()!=0){
<a name="l00252"></a>00252                 std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! &#39;col-&gt;size()&#39; returned non zero after call to &#39;col-&gt;clearContent()&#39;\nTEST FAILED&quot;</span> &lt;&lt; std::endl;
<a name="l00253"></a>00253                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00254"></a>00254         }
<a name="l00255"></a>00255 
<a name="l00256"></a>00256         <span class="comment">//boost::shared_ptr&lt;Column&lt;float&gt; &gt; col2 (new Column&lt;float&gt;(&quot;int column&quot;,FLOAT));</span>
<a name="l00257"></a>00257         col-&gt;load(<span class="stringliteral">&quot;data/&quot;</span>);
<a name="l00258"></a>00258 
<a name="l00259"></a>00259   <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00260"></a>00260                 <span class="keywordflow">if</span>(reference_data[i]!=(*col)[i]){ 
<a name="l00261"></a>00261                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: read invalid data&quot;</span> &lt;&lt; std::endl;
<a name="l00262"></a>00262                         std::cout &lt;&lt; <span class="stringliteral">&quot;Column: &#39;&quot;</span> &lt;&lt; col-&gt;getName() 
<a name="l00263"></a>00263                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; TID: &#39;&quot;</span>&lt;&lt; i 
<a name="l00264"></a>00264                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Expected Value: &#39;&quot;</span> &lt;&lt; reference_data[i] 
<a name="l00265"></a>00265                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Actual Value: &#39;&quot;</span> &lt;&lt; (*col)[i] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> 
<a name="l00266"></a>00266                                                  &lt;&lt; std::endl;          
<a name="l00267"></a>00267                         std::cerr &lt;&lt; <span class="stringliteral">&quot;STORE AND LOAD TEST FAILED!&quot;</span> &lt;&lt; std::endl;        
<a name="l00268"></a>00268                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00269"></a>00269                 }
<a name="l00270"></a>00270   }
<a name="l00271"></a>00271         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00272"></a>00272   }
<a name="l00273"></a>00273 
<a name="l00274"></a>00274         
<a name="l00275"></a>00275 
<a name="l00276"></a>00276   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00277"></a>00277 }
<a name="l00278"></a>00278 
<a name="l00279"></a><a class="code" href="unittest_8cpp.htm#aa2725a439fca2e7d05f57acf7ffb2ed7">00279</a> <span class="keyword">const</span> std::string <a class="code" href="unittest_8cpp.htm#aa2725a439fca2e7d05f57acf7ffb2ed7">getRandomString</a>(){
<a name="l00280"></a>00280 
<a name="l00281"></a>00281         std::string characterfield=<span class="stringliteral">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;
<a name="l00282"></a>00282 
<a name="l00283"></a>00283         std::string s;
<a name="l00284"></a>00284    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;10;i++){
<a name="l00285"></a>00285                 s.push_back( characterfield[rand() % characterfield.size()]);
<a name="l00286"></a>00286         }
<a name="l00287"></a>00287         <span class="keywordflow">return</span> s;
<a name="l00288"></a>00288 }
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 <span class="comment">//taken from: http://stackoverflow.com/questions/440133/how-do-i-create-a-random-alpha-numeric-string-in-c</span>
<a name="l00291"></a>00291 <span class="comment">//void gen_random(char *s, const int len) {</span>
<a name="l00292"></a>00292 <span class="comment">//    static const char alphanum[] =</span>
<a name="l00293"></a>00293 <span class="comment">//        &quot;0123456789&quot;</span>
<a name="l00294"></a>00294 <span class="comment">//        &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>
<a name="l00295"></a>00295 <span class="comment">//        &quot;abcdefghijklmnopqrstuvwxyz&quot;;</span>
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 <span class="comment">//    for (int i = 0; i &lt; len; ++i) {</span>
<a name="l00298"></a>00298 <span class="comment">//        s[i] = alphanum[rand() % (sizeof(alphanum) - 1)];</span>
<a name="l00299"></a>00299 <span class="comment">//    }</span>
<a name="l00300"></a>00300 
<a name="l00301"></a>00301 <span class="comment">//    s[len] = 0;</span>
<a name="l00302"></a>00302 <span class="comment">//}</span>
<a name="l00303"></a>00303 
<a name="l00304"></a>00304 
<a name="l00305"></a><a class="code" href="unittest_8cpp.htm#a149a59cfaea8b0591dc13190a09b5cf5">00305</a> <span class="keywordtype">bool</span> <a class="code" href="main_8cpp.htm#a7fc104b1e4c91f5fbd065c0fc53d2291">unittest</a>(boost::shared_ptr&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;std::string&gt;</a> &gt; col){
<a name="l00306"></a>00306         std::cout &lt;&lt; <span class="stringliteral">&quot;RUN Unittest for Column with BaseType ColumnBaseTyped&lt;std::string&gt; &gt;&quot;</span> &lt;&lt; std::endl;
<a name="l00307"></a>00307 
<a name="l00308"></a>00308         std::vector&lt;std::string&gt; reference_data(100);
<a name="l00309"></a>00309 
<a name="l00310"></a>00310    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00311"></a>00311                 reference_data[i]=<a class="code" href="unittest_8cpp.htm#aa2725a439fca2e7d05f57acf7ffb2ed7">getRandomString</a>();
<a name="l00312"></a>00312    }
<a name="l00313"></a>00313 
<a name="l00314"></a>00314 <span class="comment">//      for(unsigned int i=0;i&lt;reference_data.size();i++){</span>
<a name="l00315"></a>00315 <span class="comment">//              std::cout &lt;&lt; reference_data[i] &lt;&lt; std::endl;</span>
<a name="l00316"></a>00316 <span class="comment">//      }</span>
<a name="l00317"></a>00317 
<a name="l00318"></a>00318         <span class="comment">/****** BASIC INSERT TEST ******/</span>
<a name="l00319"></a>00319         std::cout &lt;&lt; <span class="stringliteral">&quot;BASIC INSERT TEST: Filling column with data...&quot;</span>; <span class="comment">// &lt;&lt; std::endl; </span>
<a name="l00320"></a>00320         <span class="comment">//col-&gt;insert(reference_data.begin(),reference_data.end());  </span>
<a name="l00321"></a>00321    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00322"></a>00322                 col-&gt;insert(reference_data[i]);
<a name="l00323"></a>00323    }    
<a name="l00324"></a>00324         <span class="comment">//col-&gt;print();</span>
<a name="l00325"></a>00325         <span class="keywordflow">if</span>(reference_data.size()!=col-&gt;size()){ 
<a name="l00326"></a>00326                 std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: invalid data size&quot;</span> &lt;&lt; std::endl;
<a name="l00327"></a>00327                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00328"></a>00328         }
<a name="l00329"></a>00329 
<a name="l00330"></a>00330   <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00331"></a>00331                 <span class="keywordflow">if</span>(reference_data[i]!=(*col)[i]){ 
<a name="l00332"></a>00332                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: read invalid data&quot;</span> &lt;&lt; std::endl;
<a name="l00333"></a>00333                         std::cout &lt;&lt; <span class="stringliteral">&quot;Column: &#39;&quot;</span> &lt;&lt; col-&gt;getName() 
<a name="l00334"></a>00334                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; TID: &#39;&quot;</span>&lt;&lt; i 
<a name="l00335"></a>00335                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Expected Value: &#39;&quot;</span> &lt;&lt; reference_data[i] 
<a name="l00336"></a>00336                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Actual Value: &#39;&quot;</span> &lt;&lt; (*col)[i] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> 
<a name="l00337"></a>00337                                                  &lt;&lt; std::endl;          
<a name="l00338"></a>00338                         std::cerr &lt;&lt; <span class="stringliteral">&quot;BASIC INSERT TEST FAILED!&quot;</span> &lt;&lt; std::endl;  
<a name="l00339"></a>00339                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00340"></a>00340                 }
<a name="l00341"></a>00341   }
<a name="l00342"></a>00342         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00343"></a>00343         <span class="comment">/****** VIRTUAL COPY CONSTRUCTOR TEST ******/</span>
<a name="l00344"></a>00344         std::cout &lt;&lt; <span class="stringliteral">&quot;VIRTUAL COPY CONSTRUCTOR TEST...&quot;</span>;
<a name="l00345"></a>00345 
<a name="l00346"></a>00346         <span class="comment">//boost::shared_ptr&lt;DictionaryCompressedColumn&lt;std::string&gt; &gt; compressed_col (new DictionaryCompressedColumn&lt;std::string&gt;(&quot;compressed int column&quot;,FLOAT));</span>
<a name="l00347"></a>00347         <span class="comment">//compressed_col-&gt;insert(reference_data.begin(),reference_data.end()); </span>
<a name="l00348"></a>00348  
<a name="l00349"></a>00349         <a class="code" href="namespaceCoGaDB.htm#a3d7ce6ae5ca4381f2b4f1db23f982c5d" title="makes a smart pointer to a ColumnBase Object visible in the namespace">ColumnPtr</a> copy=col-&gt;copy();
<a name="l00350"></a>00350                 <span class="keywordflow">if</span>(!copy){ 
<a name="l00351"></a>00351                         std::cerr &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;VIRTUAL COPY CONSTRUCTOR TEST FAILED!&quot;</span> &lt;&lt; std::endl; 
<a name="l00352"></a>00352                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00353"></a>00353                 }       
<a name="l00354"></a>00354                 <span class="keywordtype">bool</span> result = *(boost::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;std::string&gt;</a> &gt;(copy))==*(boost::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;std::string&gt;</a> &gt;(col));
<a name="l00355"></a>00355                 <span class="keywordflow">if</span>(!result){ 
<a name="l00356"></a>00356                         std::cerr &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;VIRTUAL COPY CONSTRUCTOR TEST FAILED!&quot;</span> &lt;&lt; std::endl; 
<a name="l00357"></a>00357                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00358"></a>00358                 }       
<a name="l00359"></a>00359         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00360"></a>00360         <span class="comment">/****** UPDATE TEST ******/</span>
<a name="l00361"></a>00361         <a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid=rand()%100;
<a name="l00362"></a>00362         std::string new_value=<a class="code" href="unittest_8cpp.htm#aa2725a439fca2e7d05f57acf7ffb2ed7">getRandomString</a>();
<a name="l00363"></a>00363         std::cout &lt;&lt; <span class="stringliteral">&quot;UPDATE TEST: Update value on Position &#39;&quot;</span> &lt;&lt; tid &lt;&lt; <span class="stringliteral">&quot;&#39; to new value &#39;&quot;</span> &lt;&lt; new_value &lt;&lt; <span class="stringliteral">&quot;&#39;...&quot;</span>; <span class="comment">// &lt;&lt; std::endl;</span>
<a name="l00364"></a>00364 
<a name="l00365"></a>00365         reference_data[tid]=new_value;
<a name="l00366"></a>00366 
<a name="l00367"></a>00367         col-&gt;update(tid,new_value);
<a name="l00368"></a>00368 
<a name="l00369"></a>00369   <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00370"></a>00370                 <span class="keywordflow">if</span>(reference_data[i]!=(*col)[i]){ 
<a name="l00371"></a>00371                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: read invalid data&quot;</span> &lt;&lt; std::endl;
<a name="l00372"></a>00372                         std::cout &lt;&lt; <span class="stringliteral">&quot;Column: &#39;&quot;</span> &lt;&lt; col-&gt;getName() 
<a name="l00373"></a>00373                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; TID: &#39;&quot;</span>&lt;&lt; i 
<a name="l00374"></a>00374                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Expected Value: &#39;&quot;</span> &lt;&lt; reference_data[i] 
<a name="l00375"></a>00375                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Actual Value: &#39;&quot;</span> &lt;&lt; (*col)[i] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> 
<a name="l00376"></a>00376                                                  &lt;&lt; std::endl;          
<a name="l00377"></a>00377                         std::cerr &lt;&lt; <span class="stringliteral">&quot;UPDATE TEST FAILED!&quot;</span> &lt;&lt; std::endl;        
<a name="l00378"></a>00378                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00379"></a>00379                 }
<a name="l00380"></a>00380   }
<a name="l00381"></a>00381         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00382"></a>00382         <span class="comment">/****** DELETE TEST ******/</span>
<a name="l00383"></a>00383         {
<a name="l00384"></a>00384         <a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid=rand()%100;
<a name="l00385"></a>00385 
<a name="l00386"></a>00386         std::cout &lt;&lt; <span class="stringliteral">&quot;DELETE TEST: Delete value on Position &#39;&quot;</span> &lt;&lt; tid &lt;&lt; <span class="stringliteral">&quot;&#39;...&quot;</span>; <span class="comment">// &lt;&lt; std::endl;</span>
<a name="l00387"></a>00387 
<a name="l00388"></a>00388         reference_data.erase(reference_data.begin()+tid);
<a name="l00389"></a>00389 
<a name="l00390"></a>00390         col-&gt;remove(tid);
<a name="l00391"></a>00391 
<a name="l00392"></a>00392   <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00393"></a>00393                 <span class="keywordflow">if</span>(reference_data[i]!=(*col)[i]){ 
<a name="l00394"></a>00394                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: read invalid data&quot;</span> &lt;&lt; std::endl;
<a name="l00395"></a>00395                         std::cout &lt;&lt; <span class="stringliteral">&quot;Column: &#39;&quot;</span> &lt;&lt; col-&gt;getName() 
<a name="l00396"></a>00396                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; TID: &#39;&quot;</span>&lt;&lt; i 
<a name="l00397"></a>00397                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Expected Value: &#39;&quot;</span> &lt;&lt; reference_data[i] 
<a name="l00398"></a>00398                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Actual Value: &#39;&quot;</span> &lt;&lt; (*col)[i] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> 
<a name="l00399"></a>00399                                                  &lt;&lt; std::endl;          
<a name="l00400"></a>00400                         std::cerr &lt;&lt; <span class="stringliteral">&quot;DELETE TEST FAILED!&quot;</span> &lt;&lt; std::endl;        
<a name="l00401"></a>00401                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00402"></a>00402                 }
<a name="l00403"></a>00403   }
<a name="l00404"></a>00404         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00405"></a>00405         }
<a name="l00406"></a>00406         <span class="comment">/****** STORE AND LOAD TEST ******/</span>
<a name="l00407"></a>00407         {
<a name="l00408"></a>00408         std::cout &lt;&lt; <span class="stringliteral">&quot;STORE AND LOAD TEST: store column data on disc and load it...&quot;</span>; <span class="comment">// &lt;&lt; std::endl;</span>
<a name="l00409"></a>00409         col-&gt;store(<span class="stringliteral">&quot;data/&quot;</span>);
<a name="l00410"></a>00410 
<a name="l00411"></a>00411         col-&gt;clearContent();
<a name="l00412"></a>00412         <span class="keywordflow">if</span>(col-&gt;size()!=0){
<a name="l00413"></a>00413                 std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! &#39;col-&gt;size()&#39; returned non zero after call to &#39;col-&gt;clearContent()&#39;\nTEST FAILED&quot;</span> &lt;&lt; std::endl;
<a name="l00414"></a>00414                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00415"></a>00415         }
<a name="l00416"></a>00416 
<a name="l00417"></a>00417         <span class="comment">//boost::shared_ptr&lt;Column&lt;std::string&gt; &gt; col2 (new Column&lt;std::string&gt;(&quot;int column&quot;,FLOAT));</span>
<a name="l00418"></a>00418         col-&gt;load(<span class="stringliteral">&quot;data/&quot;</span>);
<a name="l00419"></a>00419 
<a name="l00420"></a>00420   <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;reference_data.size();i++){
<a name="l00421"></a>00421                 <span class="keywordflow">if</span>(reference_data[i]!=(*col)[i]){ 
<a name="l00422"></a>00422                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error! In Unittest: read invalid data&quot;</span> &lt;&lt; std::endl;
<a name="l00423"></a>00423                         std::cout &lt;&lt; <span class="stringliteral">&quot;Column: &#39;&quot;</span> &lt;&lt; col-&gt;getName() 
<a name="l00424"></a>00424                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; TID: &#39;&quot;</span>&lt;&lt; i 
<a name="l00425"></a>00425                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Expected Value: &#39;&quot;</span> &lt;&lt; reference_data[i] 
<a name="l00426"></a>00426                                                  &lt;&lt; <span class="stringliteral">&quot;&#39; Actual Value: &#39;&quot;</span> &lt;&lt; (*col)[i] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> 
<a name="l00427"></a>00427                                                  &lt;&lt; std::endl;          
<a name="l00428"></a>00428                         std::cerr &lt;&lt; <span class="stringliteral">&quot;STORE AND LOAD TEST FAILED!&quot;</span> &lt;&lt; std::endl;        
<a name="l00429"></a>00429                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00430"></a>00430                 }
<a name="l00431"></a>00431   }
<a name="l00432"></a>00432         std::cout &lt;&lt; <span class="stringliteral">&quot;SUCCESS&quot;</span>&lt;&lt; std::endl;
<a name="l00433"></a>00433   }
<a name="l00434"></a>00434 
<a name="l00435"></a>00435         
<a name="l00436"></a>00436 
<a name="l00437"></a>00437   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00438"></a>00438 }
<a name="l00439"></a>00439 
<a name="l00440"></a>00440 
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Tue Apr 30 2013 14:01:03 for Database Implementation Techniques Programming Task SoSe2013 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
