<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Database Implementation Techniques Programming Task SoSe2013: column_base_typed.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Database Implementation Techniques Programming Task SoSe2013
   
   </div>
   <div id="projectbrief">DB2 Programming Task SoSe2013</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">column_base_typed.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="column__base__typed_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="preprocessor">#pragma once</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span>
<a name="l00004"></a>00004 <span class="preprocessor">#include &lt;<a class="code" href="base__column_8hpp.htm">core/base_column.hpp</a>&gt;</span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;utility&gt;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;functional&gt;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00010"></a>00010 
<a name="l00011"></a>00011 <span class="preprocessor">#include &lt;boost/unordered_map.hpp&gt;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;boost/any.hpp&gt;</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="comment">//#include &lt;core/column.hpp&gt;</span>
<a name="l00015"></a>00015 
<a name="l00017"></a>00017 <span class="keyword">namespace </span>CoGaDB{
<a name="l00018"></a>00018 
<a name="l00032"></a>00032 <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00033"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm">00033</a> <span class="keyword">class </span><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped</a> : <span class="keyword">public</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm" title="This class represents a generic column, is the base class for all column classes and allows a uniform...">ColumnBase</a>{
<a name="l00034"></a>00034         <span class="keyword">public</span>:
<a name="l00035"></a>00035         <span class="comment">//typedef boost::shared_ptr&lt;ColumnBaseTyped&gt; ColumnPtr;</span>
<a name="l00036"></a>00036         <span class="comment">/***************** constructors and destructor *****************/</span>
<a name="l00037"></a>00037         <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a88a1615b9b32ea4afdde6b06985dffaf">ColumnBaseTyped</a>(<span class="keyword">const</span> std::string&amp; name, <a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> db_type);
<a name="l00038"></a>00038         <span class="keyword">virtual</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#aab999a6f505e6b715290766557b25552">~ColumnBaseTyped</a>();
<a name="l00039"></a>00039 
<a name="l00040"></a>00040         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a298584fc2f5bdaea233194ab6b6b0834" title="appends a value new_Value to end of column">insert</a>(<span class="keyword">const</span> boost::any&amp; new_Value)=0;
<a name="l00041"></a>00041         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a298584fc2f5bdaea233194ab6b6b0834" title="appends a value new_Value to end of column">insert</a>(<span class="keyword">const</span> T&amp; new_Value)=0;
<a name="l00042"></a>00042         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#ac8b41ece275215ee6ca82d57294f1bb9" title="updates the value on position tid with a value new_Value">update</a>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid, <span class="keyword">const</span> boost::any&amp; new_value) = 0;
<a name="l00043"></a>00043         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#ac8b41ece275215ee6ca82d57294f1bb9" title="updates the value on position tid with a value new_Value">update</a>(<a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> tid, <span class="keyword">const</span> boost::any&amp; new_value) = 0;      
<a name="l00044"></a>00044         
<a name="l00045"></a>00045         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <span class="keyword">remove</span>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid)=0;
<a name="l00046"></a>00046         <span class="comment">//assumes tid list is sorted ascending</span>
<a name="l00047"></a>00047         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <span class="keyword">remove</span>(<a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> tid)=0;
<a name="l00048"></a>00048         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#aef36a1764886ea25e05ba098571fa711" title="deletes all values stored in the column">clearContent</a>()=0;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050         <span class="keyword">virtual</span> <span class="keyword">const</span> boost::any <span class="keyword">get</span>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid)=0;
<a name="l00051"></a>00051         <span class="comment">//virtual const boost::any* const getRawData()=0;</span>
<a name="l00052"></a>00052         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#ac87ff73aa6d72bbf3b5ae510327e22c6" title="prints the content of a column">print</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>()=0;
<a name="l00053"></a>00053         <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a8ff087045b933adcd017877c1f0802bc" title="returns the number of values (rows) in a column">size</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>()=0;
<a name="l00054"></a>00054         <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#ae990bc63aca6d10e6c25fc55f0d8de15" title="returns the size in bytes the column consumes in main memory">getSizeinBytes</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>()=0;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056         <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a811d44896f4edb003b9bad6e619a24c9" title="virtual copy constructor">copy</a>() <span class="keyword">const</span>=0;
<a name="l00057"></a>00057         <span class="comment">/***************** relational operations on Columns which return lookup tables *****************/</span>
<a name="l00058"></a>00058         <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#ac2c0472e88ed4c14d10a879a6646c3f2" title="sorts a column w.r.t. a SortOrder">sort</a>(<a class="code" href="namespaceCoGaDB.htm#a4da9b0c7d2a04facb7e4834b8cb86aa5">SortOrder</a> order); 
<a name="l00059"></a>00059         <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a91c27b988eb79cca9163a82492936814" title="filters the values of a column according to a filter condition consisting of a comparison value and a...">selection</a>(<span class="keyword">const</span> boost::any&amp; value_for_comparison, <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#aeea69c893912bd4994fd616b189db4d4">ValueComparator</a> comp);
<a name="l00060"></a>00060         <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a11b4618c929dcc789191bc6c2aa48068" title="filters the values of a column in parallel according to a filter condition consisting of a comparison...">parallel_selection</a>(<span class="keyword">const</span> boost::any&amp; value_for_comparison, <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#aeea69c893912bd4994fd616b189db4d4">ValueComparator</a> comp, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> number_of_threads);
<a name="l00061"></a>00061         <span class="comment">//join algorithms</span>
<a name="l00062"></a>00062         <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">PositionListPairPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#ac66da4e2c203ff8ca673c19242a7e766" title="joins two columns using the hash join algorithm">hash_join</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> join_column);
<a name="l00063"></a>00063         <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">PositionListPairPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a477d9ba1373752a95eabf0fa429b06d4" title="joins two columns using the sort merge join algorithm">sort_merge_join</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> join_column);
<a name="l00064"></a>00064         <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">PositionListPairPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a10457ede9dda1c5cfc120fad77b36d04" title="joins two columns using the nested loop join algorithm">nested_loop_join</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> join_column);
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 
<a name="l00067"></a>00067         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#abe0449e21775f7b45c4bf78b92a10c7d" title="adds constant to column">add</a>(<span class="keyword">const</span> boost::any&amp; new_Value);
<a name="l00068"></a>00068         <span class="comment">//vector addition between columns                       </span>
<a name="l00069"></a>00069         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#abe0449e21775f7b45c4bf78b92a10c7d" title="adds constant to column">add</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> join_column);
<a name="l00070"></a>00070 
<a name="l00071"></a>00071         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a517e7c030036165fc07f38a871f09550" title="substracts constant from column">minus</a>(<span class="keyword">const</span> boost::any&amp; new_Value);
<a name="l00072"></a>00072         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a517e7c030036165fc07f38a871f09550" title="substracts constant from column">minus</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> join_column);      
<a name="l00073"></a>00073 
<a name="l00074"></a>00074         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a629b2349ed7289016f9ea1cf2d8e69ac" title="multiply constant with column">multiply</a>(<span class="keyword">const</span> boost::any&amp; new_Value);
<a name="l00075"></a>00075         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a629b2349ed7289016f9ea1cf2d8e69ac" title="multiply constant with column">multiply</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> join_column);
<a name="l00076"></a>00076 
<a name="l00077"></a>00077         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a7c603f30ff974d76878a2d24fc863df6" title="devide values in column by a constant">division</a>(<span class="keyword">const</span> boost::any&amp; new_Value);     
<a name="l00078"></a>00078         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a7c603f30ff974d76878a2d24fc863df6" title="devide values in column by a constant">division</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> join_column);   
<a name="l00079"></a>00079 
<a name="l00080"></a>00080         <span class="comment">//template &lt;typename U, typename BinaryOperator&gt;</span>
<a name="l00081"></a>00081         <span class="comment">//std::pair&lt;ColumnPtr,ColumnPtr&gt; aggregate_by_keys(ColumnBaseTyped&lt;U&gt;* keys, BinaryOperator binary_op) const;</span>
<a name="l00082"></a>00082 
<a name="l00083"></a>00083         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a8b170edcae21575ea41c55df2c63e823" title="store a column on the disc">store</a>(<span class="keyword">const</span> std::string&amp; path) = 0;
<a name="l00084"></a>00084         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a5ddfa2dbe32f62d7a12bd0edf5f6ccd2" title="load column from disc">load</a>(<span class="keyword">const</span> std::string&amp; path) = 0;
<a name="l00085"></a>00085         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#aeeb1eb6d5b3c4c421aa79bb5584da856" title="use this method to determine whether the column is materialized or a Lookup Column">isMaterialized</a>() <span class="keyword">const</span>  <span class="keywordflow">throw</span>() = 0;
<a name="l00086"></a>00086         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#acb4e29d5b1fb0bb8c1f3ec968311ebba" title="use this method to determine whether the column is materialized or a Lookup Column">isCompressed</a>() <span class="keyword">const</span>  <span class="keywordflow">throw</span>() = 0; 
<a name="l00088"></a>00088         <span class="keyword">virtual</span> <span class="keyword">const</span> std::type_info&amp; <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a15ad2a4372a39ea9a450897534db24d2" title="returns type information of internal values">type</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>();
<a name="l00093"></a>00093         <span class="keyword">virtual</span> T&amp; <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a0f43450e8224027b9d1055ba8d758477" title="defines operator[] for this class, which enables the user to thread all typed columns as arrays...">operator[]</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index) = 0;
<a name="l00094"></a>00094         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a73a3921727fb8a5be6a81958b1a4e4d6">operator==</a>(<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;T&gt;</a>&amp; column);
<a name="l00095"></a>00095 };
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 
<a name="l00098"></a>00098         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00099"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a88a1615b9b32ea4afdde6b06985dffaf">00099</a>         <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a88a1615b9b32ea4afdde6b06985dffaf">ColumnBaseTyped&lt;T&gt;::ColumnBaseTyped</a>(<span class="keyword">const</span> std::string&amp; name, <a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> db_type) : <a class="code" href="classCoGaDB_1_1ColumnBase.htm" title="This class represents a generic column, is the base class for all column classes and allows a uniform...">ColumnBase</a>(name,db_type){
<a name="l00100"></a>00100 
<a name="l00101"></a>00101         }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00104"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#aab999a6f505e6b715290766557b25552">00104</a>         <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#aab999a6f505e6b715290766557b25552">ColumnBaseTyped&lt;T&gt;::~ColumnBaseTyped</a>(){
<a name="l00105"></a>00105 
<a name="l00106"></a>00106         }
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00109"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a15ad2a4372a39ea9a450897534db24d2">00109</a> <span class="keyword">const</span> std::type_info&amp; <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a15ad2a4372a39ea9a450897534db24d2" title="returns type information of internal values">ColumnBaseTyped&lt;T&gt;::type</a>() <span class="keyword">const</span> throw(){
<a name="l00110"></a>00110         <span class="keywordflow">return</span> <span class="keyword">typeid</span>(T);
<a name="l00111"></a>00111 }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00114"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#ac2c0472e88ed4c14d10a879a6646c3f2">00114</a> <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#ac2c0472e88ed4c14d10a879a6646c3f2" title="sorts a column w.r.t. a SortOrder">ColumnBaseTyped&lt;T&gt;::sort</a>(<a class="code" href="namespaceCoGaDB.htm#a4da9b0c7d2a04facb7e4834b8cb86aa5">SortOrder</a> order){
<a name="l00115"></a>00115 
<a name="l00116"></a>00116         <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> ids = <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a>( <span class="keyword">new</span> <a class="code" href="namespaceCoGaDB.htm#a3903511755e2c745226394b999ddb8a8">PositionList</a>());
<a name="l00117"></a>00117                 std::vector&lt;std::pair&lt;T,TID&gt; &gt; v;
<a name="l00118"></a>00118 
<a name="l00119"></a>00119                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;this-&gt;size();i++){
<a name="l00120"></a>00120                         v.push_back (std::pair&lt;T,TID&gt;((*<span class="keyword">this</span>)[i],i) );
<a name="l00121"></a>00121                 }
<a name="l00122"></a>00122 
<a name="l00123"></a>00123                 <span class="comment">//TODO: change implementation, so that no copy operations are required -&gt; use boost zip iterators!</span>
<a name="l00124"></a>00124 
<a name="l00125"></a>00125                 <span class="keywordflow">if</span>(order==<a class="code" href="namespaceCoGaDB.htm#a4da9b0c7d2a04facb7e4834b8cb86aa5aac7a3b8f2752e8a54ea32049c0d8de36">ASCENDING</a>){
<a name="l00126"></a>00126                         <span class="comment">//tbb::parallel_sort(v.begin(),v.end(),std::less_equal&lt;std::pair&lt;T,TID&gt; &gt;());</span>
<a name="l00127"></a>00127                         std::stable_sort(v.begin(),v.end(),std::less_equal&lt;std::pair&lt;T,TID&gt; &gt;());
<a name="l00128"></a>00128                 }<span class="keywordflow">else</span> <span class="keywordflow">if</span>(order==<a class="code" href="namespaceCoGaDB.htm#a4da9b0c7d2a04facb7e4834b8cb86aa5a15fe94b9b15cdeb0473d054f8ae21fbd">DESCENDING</a>){
<a name="l00129"></a>00129                         <span class="comment">//tbb::parallel_sort(v.begin(),v.end(),std::greater_equal&lt;std::pair&lt;T,TID&gt; &gt;());</span>
<a name="l00130"></a>00130                         std::stable_sort(v.begin(),v.end(),std::greater_equal&lt;std::pair&lt;T,TID&gt; &gt;()); 
<a name="l00131"></a>00131                 }<span class="keywordflow">else</span>{
<a name="l00132"></a>00132                         std::cout &lt;&lt; <span class="stringliteral">&quot;FATAL ERROR: ColumnBaseTyped&lt;T&gt;::sort(): Unknown Sorting Order!&quot;</span> &lt;&lt; std::endl;
<a name="l00133"></a>00133                 }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;v.size();i++){
<a name="l00136"></a>00136                         ids-&gt;push_back(v[i].second);
<a name="l00137"></a>00137                 }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139                 <span class="keywordflow">return</span> ids;
<a name="l00140"></a>00140 }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00144"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a11b4618c929dcc789191bc6c2aa48068">00144</a> <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a11b4618c929dcc789191bc6c2aa48068" title="filters the values of a column in parallel according to a filter condition consisting of a comparison...">ColumnBaseTyped&lt;T&gt;::parallel_selection</a>(<span class="keyword">const</span> boost::any&amp;, <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#aeea69c893912bd4994fd616b189db4d4">ValueComparator</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>){
<a name="l00145"></a>00145 
<a name="l00146"></a>00146                 <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> result_tids( <span class="keyword">new</span> <a class="code" href="namespaceCoGaDB.htm#a3903511755e2c745226394b999ddb8a8">PositionList</a>());
<a name="l00147"></a>00147 
<a name="l00148"></a>00148                 <span class="keywordflow">return</span> result_tids;
<a name="l00149"></a>00149 }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151 
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00154"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a91c27b988eb79cca9163a82492936814">00154</a> <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a91c27b988eb79cca9163a82492936814" title="filters the values of a column according to a filter condition consisting of a comparison value and a...">ColumnBaseTyped&lt;T&gt;::selection</a>(<span class="keyword">const</span> boost::any&amp; value_for_comparison, <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#aeea69c893912bd4994fd616b189db4d4">ValueComparator</a> comp){
<a name="l00155"></a>00155                 <span class="keywordflow">if</span>(value_for_comparison.type()!=<span class="keyword">typeid</span>(T)){
<a name="l00156"></a>00156                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error!!! Typemismatch for column &quot;</span> &lt;&lt; name_ &lt;&lt; std::endl;
<a name="l00157"></a>00157                         std::cout &lt;&lt; <span class="stringliteral">&quot;File: &quot;</span> &lt;&lt; __FILE__ &lt;&lt; <span class="stringliteral">&quot; Line: &quot;</span> &lt;&lt; __LINE__ &lt;&lt; std::endl;
<a name="l00158"></a>00158                         exit(-1);
<a name="l00159"></a>00159                 }
<a name="l00160"></a>00160                         
<a name="l00161"></a>00161                 T value = boost::any_cast&lt;T&gt;(value_for_comparison);
<a name="l00162"></a>00162         
<a name="l00163"></a>00163 
<a name="l00164"></a>00164                 <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> result_tids;
<a name="l00165"></a>00165 
<a name="l00166"></a>00166                                 result_tids = <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a>(<span class="keyword">new</span> <a class="code" href="namespaceCoGaDB.htm#a3903511755e2c745226394b999ddb8a8">PositionList</a>());
<a name="l00167"></a>00167 
<a name="l00168"></a>00168                                 <span class="keywordflow">if</span>(!<a class="code" href="namespaceCoGaDB.htm#a256e6fd79fe870ea16ee7fe0c8c3d7afa3c0eed2506e9aefb8851072a6a37a533">quiet</a>) std::cout &lt;&lt; <span class="stringliteral">&quot;Using CPU for Selection...&quot;</span> &lt;&lt; std::endl;
<a name="l00169"></a>00169                                 <span class="keywordflow">for</span>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> i=0;i&lt;this-&gt;size();i++){
<a name="l00170"></a>00170                 
<a name="l00171"></a>00171                                         <span class="comment">//boost::any value = column-&gt;get(i);</span>
<a name="l00172"></a>00172                                         <span class="comment">//val = values_[i];</span>
<a name="l00173"></a>00173                         
<a name="l00174"></a>00174                                         <span class="keywordflow">if</span>(comp==<a class="code" href="namespaceCoGaDB.htm#aeea69c893912bd4994fd616b189db4d4acd922965ccf5d670a7096870ad06a883">EQUAL</a>){
<a name="l00175"></a>00175                                         <span class="keywordflow">if</span>(value==(*<span class="keyword">this</span>)[i]){
<a name="l00176"></a>00176                                                 <span class="comment">//result_table-&gt;insert(this-&gt;fetchTuple(i));</span>
<a name="l00177"></a>00177                                                 result_tids-&gt;push_back(i);
<a name="l00178"></a>00178                                         }
<a name="l00179"></a>00179                                         }<span class="keywordflow">else</span> <span class="keywordflow">if</span>(comp==<a class="code" href="namespaceCoGaDB.htm#aeea69c893912bd4994fd616b189db4d4a75a994dfca60310f3806fea61ecfd007">LESSER</a>){
<a name="l00180"></a>00180                                         <span class="keywordflow">if</span>((*<span class="keyword">this</span>)[i]&lt;value){
<a name="l00181"></a>00181                                                 <span class="comment">//result_table-&gt;insert(this-&gt;fetchTuple(i));</span>
<a name="l00182"></a>00182                                                 result_tids-&gt;push_back(i);
<a name="l00183"></a>00183                                         }
<a name="l00184"></a>00184                                         }<span class="keywordflow">else</span> <span class="keywordflow">if</span>(comp==<a class="code" href="namespaceCoGaDB.htm#aeea69c893912bd4994fd616b189db4d4a0df6227c010292cc19f175c19bc8683a">GREATER</a>){
<a name="l00185"></a>00185                                         <span class="keywordflow">if</span>((*<span class="keyword">this</span>)[i]&gt;value){
<a name="l00186"></a>00186                                                 result_tids-&gt;push_back(i);
<a name="l00187"></a>00187                                                 <span class="comment">//result_table-&gt;insert(this-&gt;fetchTuple(i));</span>
<a name="l00188"></a>00188                                         }
<a name="l00189"></a>00189                                         }<span class="keywordflow">else</span>{
<a name="l00190"></a>00190 
<a name="l00191"></a>00191                                         }
<a name="l00192"></a>00192                                 }       
<a name="l00193"></a>00193 
<a name="l00194"></a>00194             <span class="comment">//}</span>
<a name="l00195"></a>00195             <span class="keywordflow">return</span> result_tids;
<a name="l00196"></a>00196 }
<a name="l00197"></a>00197 
<a name="l00198"></a>00198         
<a name="l00199"></a>00199         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00200"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#ac66da4e2c203ff8ca673c19242a7e766">00200</a>         <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">PositionListPairPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#ac66da4e2c203ff8ca673c19242a7e766" title="joins two columns using the hash join algorithm">ColumnBaseTyped&lt;T&gt;::hash_join</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> join_column_){
<a name="l00201"></a>00201 
<a name="l00202"></a>00202                 <span class="keyword">typedef</span> boost::unordered_multimap&lt;T,TID,boost::hash&lt;T&gt;, std::equal_to&lt;T&gt; &gt; HashTable;
<a name="l00203"></a>00203 
<a name="l00204"></a>00204                                 <span class="keywordflow">if</span>(join_column_-&gt;type()!=<span class="keyword">typeid</span>(T)){
<a name="l00205"></a>00205                                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error!!! Typemismatch for columns &quot;</span> &lt;&lt; this-&gt;name_  &lt;&lt; <span class="stringliteral">&quot; and &quot;</span> &lt;&lt; join_column_-&gt;getName() &lt;&lt; std::endl;
<a name="l00206"></a>00206                                         std::cout &lt;&lt; <span class="stringliteral">&quot;File: &quot;</span> &lt;&lt; __FILE__ &lt;&lt; <span class="stringliteral">&quot; Line: &quot;</span> &lt;&lt; __LINE__ &lt;&lt; std::endl;
<a name="l00207"></a>00207                                         exit(-1);
<a name="l00208"></a>00208                                 }
<a name="l00209"></a>00209                                 
<a name="l00210"></a>00210                                 shared_pointer_namespace::shared_ptr&lt;ColumnBaseTyped&lt;T&gt; &gt; join_column = shared_pointer_namespace::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;T&gt;</a> &gt;(join_column_); <span class="comment">//static_cast&lt;IntColumnPtr&gt;(column1);</span>
<a name="l00211"></a>00211 
<a name="l00212"></a>00212                                 <a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">PositionListPairPtr</a> join_tids( <span class="keyword">new</span> <a class="code" href="namespaceCoGaDB.htm#ad25a5198c5815e9eddddc65c1f156b2e">PositionListPair</a>());
<a name="l00213"></a>00213                                 join_tids-&gt;first = <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a>( <span class="keyword">new</span> <a class="code" href="namespaceCoGaDB.htm#a3903511755e2c745226394b999ddb8a8">PositionList</a>() );
<a name="l00214"></a>00214                                 join_tids-&gt;second = <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a>( <span class="keyword">new</span> <a class="code" href="namespaceCoGaDB.htm#a3903511755e2c745226394b999ddb8a8">PositionList</a>() );
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 
<a name="l00217"></a>00217         <span class="comment">//create hash table</span>
<a name="l00218"></a>00218         HashTable hashtable;
<a name="l00219"></a>00219         <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;this-&gt;size();i++)        
<a name="l00220"></a>00220                 hashtable.insert(
<a name="l00221"></a>00221                                                                 std::pair&lt;T,TID&gt; ((*<span class="keyword">this</span>)[i],i)
<a name="l00222"></a>00222                                         );
<a name="l00223"></a>00223 
<a name="l00224"></a>00224         <span class="comment">//probe larger relation</span>
<a name="l00225"></a>00225         <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;join_column-&gt;size();i++){
<a name="l00226"></a>00226                 std::pair&lt;typename HashTable::iterator, typename HashTable::iterator&gt; range =  hashtable.equal_range((*join_column)[i]);
<a name="l00227"></a>00227                 <span class="keywordflow">for</span>(<span class="keyword">typename</span> HashTable::iterator it=range.first ; it!=range.second;it++){
<a name="l00228"></a>00228                         <span class="keywordflow">if</span>(it-&gt;first==(*join_column)[i]){
<a name="l00229"></a>00229                                 join_tids-&gt;first-&gt;push_back(it-&gt;second);
<a name="l00230"></a>00230                                 join_tids-&gt;second-&gt;push_back(i);
<a name="l00231"></a>00231                                 <span class="comment">//cout &lt;&lt; &quot;match! &quot; &lt;&lt; it-&gt;second &lt;&lt; &quot;, &quot; &lt;&lt; i &lt;&lt; &quot;     &quot;  &lt;&lt; it-&gt;first &lt;&lt; endl;</span>
<a name="l00232"></a>00232                         }
<a name="l00233"></a>00233                 }
<a name="l00234"></a>00234         }
<a name="l00235"></a>00235 
<a name="l00236"></a>00236                 <span class="keywordflow">return</span> join_tids;
<a name="l00237"></a>00237         }
<a name="l00238"></a>00238 
<a name="l00239"></a>00239         <span class="keyword">template</span>&lt;<span class="keyword">class</span> Type&gt;
<a name="l00240"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a477d9ba1373752a95eabf0fa429b06d4">00240</a>         <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">PositionListPairPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a477d9ba1373752a95eabf0fa429b06d4" title="joins two columns using the sort merge join algorithm">ColumnBaseTyped&lt;Type&gt;::sort_merge_join</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> join_column_){
<a name="l00241"></a>00241 
<a name="l00242"></a>00242                                 <span class="keywordflow">if</span>(join_column_-&gt;type()!=<span class="keyword">typeid</span>(Type)){
<a name="l00243"></a>00243                                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error!!! Typemismatch for columns &quot;</span> &lt;&lt; this-&gt;name_  &lt;&lt; <span class="stringliteral">&quot; and &quot;</span> &lt;&lt; join_column_-&gt;getName() &lt;&lt; std::endl;
<a name="l00244"></a>00244                                         std::cout &lt;&lt; <span class="stringliteral">&quot;File: &quot;</span> &lt;&lt; __FILE__ &lt;&lt; <span class="stringliteral">&quot; Line: &quot;</span> &lt;&lt; __LINE__ &lt;&lt; std::endl;
<a name="l00245"></a>00245                                         exit(-1);
<a name="l00246"></a>00246                                 }
<a name="l00247"></a>00247                                 
<a name="l00248"></a>00248                                 shared_pointer_namespace::shared_ptr&lt;ColumnBaseTyped&lt;Type&gt; &gt; join_column = shared_pointer_namespace::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;Type&gt;</a> &gt;(join_column_); <span class="comment">//static_cast&lt;IntColumnPtr&gt;(column1);</span>
<a name="l00249"></a>00249 
<a name="l00250"></a>00250                                 <a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">PositionListPairPtr</a> join_tids( <span class="keyword">new</span> <a class="code" href="namespaceCoGaDB.htm#ad25a5198c5815e9eddddc65c1f156b2e">PositionListPair</a>());
<a name="l00251"></a>00251                                 join_tids-&gt;first = <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a>( <span class="keyword">new</span> <a class="code" href="namespaceCoGaDB.htm#a3903511755e2c745226394b999ddb8a8">PositionList</a>() );
<a name="l00252"></a>00252                                 join_tids-&gt;second = <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a>( <span class="keyword">new</span> <a class="code" href="namespaceCoGaDB.htm#a3903511755e2c745226394b999ddb8a8">PositionList</a>() );
<a name="l00253"></a>00253 
<a name="l00254"></a>00254                                 <span class="keywordflow">return</span> join_tids;
<a name="l00255"></a>00255         }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 
<a name="l00258"></a>00258         <span class="keyword">template</span>&lt;<span class="keyword">class</span> Type&gt;
<a name="l00259"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a10457ede9dda1c5cfc120fad77b36d04">00259</a>         <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">PositionListPairPtr</a> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a10457ede9dda1c5cfc120fad77b36d04" title="joins two columns using the nested loop join algorithm">ColumnBaseTyped&lt;Type&gt;::nested_loop_join</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> join_column_){
<a name="l00260"></a>00260                                 assert(join_column_!=NULL);
<a name="l00261"></a>00261                                 <span class="keywordflow">if</span>(join_column_-&gt;type()!=<span class="keyword">typeid</span>(Type)){
<a name="l00262"></a>00262                                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error!!! Typemismatch for columns &quot;</span> &lt;&lt; this-&gt;name_  &lt;&lt; <span class="stringliteral">&quot; and &quot;</span> &lt;&lt; join_column_-&gt;getName() &lt;&lt; std::endl;
<a name="l00263"></a>00263                                         std::cout &lt;&lt; <span class="stringliteral">&quot;File: &quot;</span> &lt;&lt; __FILE__ &lt;&lt; <span class="stringliteral">&quot; Line: &quot;</span> &lt;&lt; __LINE__ &lt;&lt; std::endl;
<a name="l00264"></a>00264                                         exit(-1);
<a name="l00265"></a>00265                                 }
<a name="l00266"></a>00266                                 
<a name="l00267"></a>00267                                 shared_pointer_namespace::shared_ptr&lt;ColumnBaseTyped&lt;Type&gt; &gt; join_column = shared_pointer_namespace::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;Type&gt;</a> &gt;(join_column_); <span class="comment">//static_cast&lt;IntColumnPtr&gt;(column1);</span>
<a name="l00268"></a>00268 
<a name="l00269"></a>00269                                 <a class="code" href="namespaceCoGaDB.htm#a33ccb4afa788aed82f287658a7b76d2b">PositionListPairPtr</a> join_tids( <span class="keyword">new</span> <a class="code" href="namespaceCoGaDB.htm#ad25a5198c5815e9eddddc65c1f156b2e">PositionListPair</a>());
<a name="l00270"></a>00270                                 join_tids-&gt;first = <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a>( <span class="keyword">new</span> <a class="code" href="namespaceCoGaDB.htm#a3903511755e2c745226394b999ddb8a8">PositionList</a>() );
<a name="l00271"></a>00271                                 join_tids-&gt;second = <a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a>( <span class="keyword">new</span> <a class="code" href="namespaceCoGaDB.htm#a3903511755e2c745226394b999ddb8a8">PositionList</a>() );
<a name="l00272"></a>00272 
<a name="l00273"></a>00273                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;this-&gt;size();i++){
<a name="l00274"></a>00274                         <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j=0;j&lt;join_column-&gt;size();j++){
<a name="l00275"></a>00275                                 <span class="keywordflow">if</span>((*<span class="keyword">this</span>)[i]==(*join_column)[j]){
<a name="l00276"></a>00276                                         <span class="keywordflow">if</span>(<a class="code" href="namespaceCoGaDB.htm#a256e6fd79fe870ea16ee7fe0c8c3d7afa8df471a6865d1be51fd50109686043d9">debug</a>) std::cout &lt;&lt; <span class="stringliteral">&quot;MATCH: (&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;
<a name="l00277"></a>00277                                         join_tids-&gt;first-&gt;push_back(i);
<a name="l00278"></a>00278                                         join_tids-&gt;second-&gt;push_back(j);
<a name="l00279"></a>00279                                 }
<a name="l00280"></a>00280                         }
<a name="l00281"></a>00281                 }
<a name="l00282"></a>00282 
<a name="l00283"></a>00283                 <span class="keywordflow">return</span> join_tids;
<a name="l00284"></a>00284         }
<a name="l00285"></a>00285 
<a name="l00286"></a>00286         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00287"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a73a3921727fb8a5be6a81958b1a4e4d6">00287</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a73a3921727fb8a5be6a81958b1a4e4d6">ColumnBaseTyped&lt;T&gt;::operator==</a>(<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;T&gt;</a>&amp; column){
<a name="l00288"></a>00288           <span class="keywordflow">if</span>(this-&gt;size()!=column.<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a8ff087045b933adcd017877c1f0802bc" title="returns the number of values (rows) in a column">size</a>()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00289"></a>00289           <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;this-&gt;size();i++){
<a name="l00290"></a>00290                         <span class="keywordflow">if</span>((*<span class="keyword">this</span>)[i]!=column[i]){      
<a name="l00291"></a>00291                                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00292"></a>00292                         }
<a name="l00293"></a>00293           }
<a name="l00294"></a>00294           <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00295"></a>00295    }
<a name="l00296"></a>00296 
<a name="l00297"></a>00297         <span class="keyword">template</span>&lt;<span class="keyword">class</span> Type&gt;
<a name="l00298"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#abe0449e21775f7b45c4bf78b92a10c7d">00298</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#abe0449e21775f7b45c4bf78b92a10c7d" title="adds constant to column">ColumnBaseTyped&lt;Type&gt;::add</a>(<span class="keyword">const</span> boost::any&amp; new_value){
<a name="l00299"></a>00299                 <span class="keywordflow">if</span>(new_value.empty()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00300"></a>00300                 <span class="keywordflow">if</span>(<span class="keyword">typeid</span>(Type)==new_value.type()){
<a name="l00301"></a>00301                          Type value = boost::any_cast&lt;Type&gt;(new_value);
<a name="l00302"></a>00302                          <span class="comment">//std::transform(myvec.begin(), myvec.end(), myvec.begin(),</span>
<a name="l00303"></a>00303           <span class="comment">//bind2nd(std::plus&lt;double&gt;(), 1.0));</span>
<a name="l00304"></a>00304                          <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;this-&gt;size();i++){
<a name="l00305"></a>00305                                         this-&gt;operator[](i)+=value;
<a name="l00306"></a>00306                          }
<a name="l00307"></a>00307                          <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00308"></a>00308                 }
<a name="l00309"></a>00309                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00310"></a>00310         }
<a name="l00311"></a>00311         
<a name="l00312"></a>00312 
<a name="l00313"></a>00313                         
<a name="l00314"></a>00314         <span class="keyword">template</span>&lt;<span class="keyword">class</span> Type&gt;
<a name="l00315"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a86465e676bc50050e742502349a329b0">00315</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#abe0449e21775f7b45c4bf78b92a10c7d" title="adds constant to column">ColumnBaseTyped&lt;Type&gt;::add</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> column){
<a name="l00316"></a>00316                 <span class="comment">//std::transform ( first, first+5, second, results, std::plus&lt;int&gt;() );         </span>
<a name="l00317"></a>00317                 shared_pointer_namespace::shared_ptr&lt;ColumnBaseTyped&lt;Type&gt; &gt; typed_column = shared_pointer_namespace::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;Type&gt;</a> &gt;(column);
<a name="l00318"></a>00318                 <span class="keywordflow">if</span>(!column) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00319"></a>00319                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;this-&gt;size();i++){
<a name="l00320"></a>00320                         this-&gt;operator[](i)+=typed_column-&gt;operator[](i);
<a name="l00321"></a>00321                 }                       
<a name="l00322"></a>00322                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00323"></a>00323         }
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 
<a name="l00326"></a>00326 
<a name="l00327"></a>00327         <span class="keyword">template</span>&lt;<span class="keyword">class</span> Type&gt;
<a name="l00328"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a517e7c030036165fc07f38a871f09550">00328</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a517e7c030036165fc07f38a871f09550" title="substracts constant from column">ColumnBaseTyped&lt;Type&gt;::minus</a>(<span class="keyword">const</span> boost::any&amp; new_value){
<a name="l00329"></a>00329                 <span class="comment">//shared_pointer_namespace::shared_ptr&lt;ColumnBaseTyped&lt;Type&gt; &gt; typed_column = shared_pointer_namespace::static_pointer_cast&lt;ColumnBaseTyped&lt;Type&gt; &gt;(column);    </span>
<a name="l00330"></a>00330                 <span class="keywordflow">if</span>(new_value.empty()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00331"></a>00331                 <span class="keywordflow">if</span>(<span class="keyword">typeid</span>(Type)==new_value.type()){
<a name="l00332"></a>00332                          Type value = boost::any_cast&lt;Type&gt;(new_value);
<a name="l00333"></a>00333                          <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;this-&gt;size();i++){
<a name="l00334"></a>00334                                         this-&gt;operator[](i)-=value;
<a name="l00335"></a>00335                          }
<a name="l00336"></a>00336                          <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00337"></a>00337                 }
<a name="l00338"></a>00338                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00339"></a>00339         }
<a name="l00340"></a>00340         
<a name="l00341"></a>00341         <span class="keyword">template</span>&lt;<span class="keyword">class</span> Type&gt;
<a name="l00342"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#aecf75e19247ccd3e34d0b8f70b00b2bb">00342</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a517e7c030036165fc07f38a871f09550" title="substracts constant from column">ColumnBaseTyped&lt;Type&gt;::minus</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> column){
<a name="l00343"></a>00343                 <span class="comment">//std::transform ( first, first+5, second, results, std::plus&lt;int&gt;() );         </span>
<a name="l00344"></a>00344                 shared_pointer_namespace::shared_ptr&lt;ColumnBaseTyped&lt;Type&gt; &gt; typed_column = shared_pointer_namespace::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;Type&gt;</a> &gt;(column);
<a name="l00345"></a>00345                 <span class="keywordflow">if</span>(!column) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00346"></a>00346                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;this-&gt;size();i++){
<a name="l00347"></a>00347                         this-&gt;operator[](i)-=typed_column-&gt;operator[](i);
<a name="l00348"></a>00348                 }                       
<a name="l00349"></a>00349                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00350"></a>00350         }       
<a name="l00351"></a>00351 
<a name="l00352"></a>00352 
<a name="l00353"></a>00353         <span class="keyword">template</span>&lt;<span class="keyword">class</span> Type&gt;
<a name="l00354"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a629b2349ed7289016f9ea1cf2d8e69ac">00354</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a629b2349ed7289016f9ea1cf2d8e69ac" title="multiply constant with column">ColumnBaseTyped&lt;Type&gt;::multiply</a>(<span class="keyword">const</span> boost::any&amp; new_value){
<a name="l00355"></a>00355                 <span class="keywordflow">if</span>(new_value.empty()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00356"></a>00356                 <span class="keywordflow">if</span>(<span class="keyword">typeid</span>(Type)==new_value.type()){
<a name="l00357"></a>00357                          Type value = boost::any_cast&lt;Type&gt;(new_value);
<a name="l00358"></a>00358                          <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;this-&gt;size();i++){
<a name="l00359"></a>00359                                         this-&gt;operator[](i)*=value;
<a name="l00360"></a>00360                          }
<a name="l00361"></a>00361                          <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00362"></a>00362                 }
<a name="l00363"></a>00363                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00364"></a>00364         }
<a name="l00365"></a>00365         
<a name="l00366"></a>00366         <span class="keyword">template</span>&lt;<span class="keyword">class</span> Type&gt;
<a name="l00367"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a49169a89bcb598b84dcd11eac21c2055">00367</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a629b2349ed7289016f9ea1cf2d8e69ac" title="multiply constant with column">ColumnBaseTyped&lt;Type&gt;::multiply</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> column){
<a name="l00368"></a>00368                 <span class="comment">//std::transform ( first, first+5, second, results, std::plus&lt;int&gt;() );         </span>
<a name="l00369"></a>00369                 shared_pointer_namespace::shared_ptr&lt;ColumnBaseTyped&lt;Type&gt; &gt; typed_column = shared_pointer_namespace::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;Type&gt;</a> &gt;(column);
<a name="l00370"></a>00370                 <span class="keywordflow">if</span>(!column) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00371"></a>00371                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;this-&gt;size();i++){
<a name="l00372"></a>00372                         this-&gt;operator[](i)*=typed_column-&gt;operator[](i);
<a name="l00373"></a>00373                 }                       
<a name="l00374"></a>00374                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00375"></a>00375         }
<a name="l00376"></a>00376 
<a name="l00377"></a>00377 
<a name="l00378"></a>00378 
<a name="l00379"></a>00379         <span class="keyword">template</span>&lt;<span class="keyword">class</span> Type&gt;
<a name="l00380"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a7c603f30ff974d76878a2d24fc863df6">00380</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a7c603f30ff974d76878a2d24fc863df6" title="devide values in column by a constant">ColumnBaseTyped&lt;Type&gt;::division</a>(<span class="keyword">const</span> boost::any&amp; new_value){
<a name="l00381"></a>00381                 <span class="keywordflow">if</span>(new_value.empty()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00382"></a>00382                 <span class="keywordflow">if</span>(<span class="keyword">typeid</span>(Type)==new_value.type()){
<a name="l00383"></a>00383                          Type value = boost::any_cast&lt;Type&gt;(new_value);
<a name="l00384"></a>00384                          <span class="comment">//check that we do not devide by zero</span>
<a name="l00385"></a>00385                          <span class="keywordflow">if</span>(value==0) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00386"></a>00386                          <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;this-&gt;size();i++){
<a name="l00387"></a>00387                                         this-&gt;operator[](i)/=value;
<a name="l00388"></a>00388                          }
<a name="l00389"></a>00389                          <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00390"></a>00390                 }
<a name="l00391"></a>00391                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00392"></a>00392         }
<a name="l00393"></a>00393         
<a name="l00394"></a>00394         <span class="keyword">template</span>&lt;<span class="keyword">class</span> Type&gt;
<a name="l00395"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#aa792f1534eb72663cdad309f183902df">00395</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a7c603f30ff974d76878a2d24fc863df6" title="devide values in column by a constant">ColumnBaseTyped&lt;Type&gt;::division</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> column){
<a name="l00396"></a>00396                 <span class="comment">//std::transform ( first, first+5, second, results, std::plus&lt;int&gt;() );         </span>
<a name="l00397"></a>00397                 shared_pointer_namespace::shared_ptr&lt;ColumnBaseTyped&lt;Type&gt; &gt; typed_column = shared_pointer_namespace::static_pointer_cast&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;Type&gt;</a> &gt;(column);
<a name="l00398"></a>00398                 <span class="keywordflow">if</span>(!column) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00399"></a>00399                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;this-&gt;size();i++){
<a name="l00400"></a>00400                         this-&gt;operator[](i)/=typed_column-&gt;operator[](i);
<a name="l00401"></a>00401                 }                       
<a name="l00402"></a>00402                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00403"></a>00403         }
<a name="l00404"></a>00404 
<a name="l00405"></a>00405         <span class="comment">//total tempalte specializations, because numeric computations are undefined on strings </span>
<a name="l00406"></a>00406         <span class="keyword">template</span>&lt;&gt;
<a name="l00407"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a23c7594a257774ef9ddfbe99abd036a5">00407</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#abe0449e21775f7b45c4bf78b92a10c7d" title="adds constant to column">ColumnBaseTyped&lt;std::string&gt;::add</a>(<span class="keyword">const</span> boost::any&amp;){ <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00408"></a>00408         <span class="keyword">template</span>&lt;&gt;
<a name="l00409"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a84c1639c77eadf006e7807784d9dff29">00409</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#abe0449e21775f7b45c4bf78b92a10c7d" title="adds constant to column">ColumnBaseTyped&lt;std::string&gt;::add</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a>){ <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00410"></a>00410 
<a name="l00411"></a>00411         <span class="keyword">template</span>&lt;&gt;
<a name="l00412"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a05bb997933c470e4d7ff2c337c727356">00412</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a517e7c030036165fc07f38a871f09550" title="substracts constant from column">ColumnBaseTyped&lt;std::string&gt;::minus</a>(<span class="keyword">const</span> boost::any&amp;){ <span class="keywordflow">return</span> <span class="keyword">false</span>;       }
<a name="l00413"></a>00413         <span class="keyword">template</span>&lt;&gt;
<a name="l00414"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#adc71977798f104163115514a5c4fe9a8">00414</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a517e7c030036165fc07f38a871f09550" title="substracts constant from column">ColumnBaseTyped&lt;std::string&gt;::minus</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a>){ <span class="keywordflow">return</span> <span class="keyword">false</span>;       }
<a name="l00415"></a>00415 
<a name="l00416"></a>00416 
<a name="l00417"></a>00417         <span class="keyword">template</span>&lt;&gt;
<a name="l00418"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a62130417f392031ea0e277a6ae291eb4">00418</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a629b2349ed7289016f9ea1cf2d8e69ac" title="multiply constant with column">ColumnBaseTyped&lt;std::string&gt;::multiply</a>(<span class="keyword">const</span> boost::any&amp;){ <span class="keywordflow">return</span> <span class="keyword">false</span>;    }
<a name="l00419"></a>00419         <span class="keyword">template</span>&lt;&gt;
<a name="l00420"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a0c68502575a0f9b3eb47ceb12c415997">00420</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a629b2349ed7289016f9ea1cf2d8e69ac" title="multiply constant with column">ColumnBaseTyped&lt;std::string&gt;::multiply</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a>){ <span class="keywordflow">return</span> <span class="keyword">false</span>;    }
<a name="l00421"></a>00421         
<a name="l00422"></a>00422         <span class="keyword">template</span>&lt;&gt;
<a name="l00423"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a1eb7c89cfe4e8f8999380db3a86e14fa">00423</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a7c603f30ff974d76878a2d24fc863df6" title="devide values in column by a constant">ColumnBaseTyped&lt;std::string&gt;::division</a>(<span class="keyword">const</span> boost::any&amp;){ <span class="keywordflow">return</span> <span class="keyword">false</span>;    }
<a name="l00424"></a>00424         <span class="keyword">template</span>&lt;&gt;
<a name="l00425"></a><a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a2cdd3d1b385fc47df49d25c216b3d82f">00425</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm#a7c603f30ff974d76878a2d24fc863df6" title="devide values in column by a constant">ColumnBaseTyped&lt;std::string&gt;::division</a>(<a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a>){ <span class="keywordflow">return</span> <span class="keyword">false</span>;    }
<a name="l00426"></a>00426 
<a name="l00427"></a>00427 }; <span class="comment">//end namespace CogaDB</span>
<a name="l00428"></a>00428 
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Tue Apr 30 2013 14:01:03 for Database Implementation Techniques Programming Task SoSe2013 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
