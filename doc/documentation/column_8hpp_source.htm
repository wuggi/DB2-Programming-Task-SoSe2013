<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Database Implementation Techniques Programming Task SoSe2013: column.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Database Implementation Techniques Programming Task SoSe2013
   
   </div>
   <div id="projectbrief">DB2 Programming Task SoSe2013</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">column.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="column_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#pragma once</span>
<a name="l00002"></a>00002 <span class="preprocessor"></span>
<a name="l00003"></a>00003 <span class="preprocessor">#include &lt;<a class="code" href="column__base__typed_8hpp.htm">core/column_base_typed.hpp</a>&gt;</span>
<a name="l00004"></a>00004 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="keyword">namespace </span>CoGaDB{
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00010"></a><a class="code" href="classCoGaDB_1_1Column.htm">00010</a> <span class="keyword">class </span><a class="code" href="classCoGaDB_1_1Column.htm">Column</a> : <span class="keyword">public</span> <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped</a>&lt;T&gt;{
<a name="l00011"></a>00011         <span class="keyword">public</span>:
<a name="l00012"></a>00012         <span class="comment">/***************** constructors and destructor *****************/</span>
<a name="l00013"></a>00013         <a class="code" href="classCoGaDB_1_1Column.htm#a44481f9232a50f794ec676d8673fbe1a">Column</a>(<span class="keyword">const</span> std::string&amp; name, <a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> db_type);
<a name="l00014"></a>00014         <span class="comment">//Column(const Column&amp; column);</span>
<a name="l00015"></a>00015         <span class="keyword">virtual</span> <a class="code" href="classCoGaDB_1_1Column.htm#a621aebd6e1e773434faf88d9f3374efd">~Column</a>();
<a name="l00016"></a>00016 
<a name="l00017"></a>00017         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#aafa4cce4bb58a90461aaebba304b57f7" title="appends a value new_Value to end of column">insert</a>(<span class="keyword">const</span> boost::any&amp; new_value);
<a name="l00018"></a>00018         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#aafa4cce4bb58a90461aaebba304b57f7" title="appends a value new_Value to end of column">insert</a>(<span class="keyword">const</span> T&amp; new_value);        
<a name="l00019"></a>00019         <span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIterator&gt;
<a name="l00020"></a>00020         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#aafa4cce4bb58a90461aaebba304b57f7" title="appends a value new_Value to end of column">insert</a>(InputIterator first, InputIterator last);
<a name="l00021"></a>00021 
<a name="l00022"></a>00022         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a1a1287868c72d0b787e67823ca03bd6e" title="updates the value on position tid with a value new_Value">update</a>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid, <span class="keyword">const</span> boost::any&amp; new_value);
<a name="l00023"></a>00023         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a1a1287868c72d0b787e67823ca03bd6e" title="updates the value on position tid with a value new_Value">update</a>(<a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> tid, <span class="keyword">const</span> boost::any&amp; new_value);  
<a name="l00024"></a>00024         
<a name="l00025"></a>00025         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <span class="keyword">remove</span>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid);
<a name="l00026"></a>00026         <span class="comment">//assumes tid list is sorted ascending</span>
<a name="l00027"></a>00027         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <span class="keyword">remove</span>(<a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> tid);
<a name="l00028"></a>00028         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a26e3afbca849e28e17986c08a8720132" title="deletes all values stored in the column">clearContent</a>();
<a name="l00029"></a>00029 
<a name="l00030"></a>00030         <span class="keyword">virtual</span> <span class="keyword">const</span> boost::any <span class="keyword">get</span>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid);
<a name="l00031"></a>00031         <span class="comment">//virtual const boost::any* const getRawData();</span>
<a name="l00032"></a>00032         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classCoGaDB_1_1Column.htm#aca3e004b9b02372235311f16c79a2bcb" title="prints the content of a column">print</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>();
<a name="l00033"></a>00033         <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="classCoGaDB_1_1Column.htm#a4dab93f9e3b6383acd1959c9a0495fff" title="returns the number of values (rows) in a column">size</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>();
<a name="l00034"></a>00034         <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classCoGaDB_1_1Column.htm#accbee2285b9d47518547c5383a080552" title="returns the size in bytes the column consumes in main memory">getSizeinBytes</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>();
<a name="l00035"></a>00035 
<a name="l00036"></a>00036         <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> <a class="code" href="classCoGaDB_1_1Column.htm#a83eb97a5171c978cf67592bb0fd55f5a" title="virtual copy constructor">copy</a>() <span class="keyword">const</span>;
<a name="l00037"></a>00037 
<a name="l00038"></a>00038         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a24bd8a3baf1d5a5b7cdeabaafcfc945b" title="store a column on the disc">store</a>(<span class="keyword">const</span> std::string&amp; path);
<a name="l00039"></a>00039         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a422928275ea027a5ea67cdc767d3add2" title="load column from disc">load</a>(<span class="keyword">const</span> std::string&amp; path);
<a name="l00040"></a>00040         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a89cf6f9a5748168bcf1bd60e52b4c67e" title="use this method to determine whether the column is materialized or a Lookup Column">isMaterialized</a>() <span class="keyword">const</span>  <span class="keywordflow">throw</span>();
<a name="l00041"></a>00041         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a8ba3e2a3c8bd3e320d059146b0244555" title="use this method to determine whether the column is materialized or a Lookup Column">isCompressed</a>() <span class="keyword">const</span>  <span class="keywordflow">throw</span>();     
<a name="l00042"></a>00042         
<a name="l00043"></a>00043         <span class="keyword">virtual</span> T&amp; <a class="code" href="classCoGaDB_1_1Column.htm#ab676d44267ae7fb54068f14bd6a26104" title="defines operator[] for this class, which enables the user to thread all typed columns as arrays...">operator[]</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index);
<a name="l00044"></a>00044 
<a name="l00045"></a>00045         std::vector&lt;T&gt;&amp; <a class="code" href="classCoGaDB_1_1Column.htm#a1beb62451a2b27cfa0b5317d3e94ca5f">getContent</a>();
<a name="l00046"></a>00046 
<a name="l00047"></a>00047         <span class="keyword">private</span>:
<a name="l00048"></a>00048 
<a name="l00049"></a><a class="code" href="structCoGaDB_1_1Column_1_1Type__TID__Comparator.htm">00049</a>                 <span class="keyword">struct </span><a class="code" href="structCoGaDB_1_1Column_1_1Type__TID__Comparator.htm">Type_TID_Comparator</a> {
<a name="l00050"></a><a class="code" href="structCoGaDB_1_1Column_1_1Type__TID__Comparator.htm#adc41e80589b1d6305e9f1c4654e3b01f">00050</a>                         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="structCoGaDB_1_1Column_1_1Type__TID__Comparator.htm#adc41e80589b1d6305e9f1c4654e3b01f">operator() </a>(std::pair&lt;T,TID&gt; i, std::pair&lt;T,TID&gt; j) { <span class="keywordflow">return</span> (i.first&lt;j.first);}
<a name="l00051"></a>00051                 } <a class="code" href="classCoGaDB_1_1Column.htm#ac4ad5def8ec3c86645fc18acf516bf5a">type_tid_comparator</a>;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053         
<a name="l00055"></a><a class="code" href="classCoGaDB_1_1Column.htm#af51cf7fdaf246c0f074774c4bda96453">00055</a>         std::vector&lt;T&gt; <a class="code" href="classCoGaDB_1_1Column.htm#af51cf7fdaf246c0f074774c4bda96453">values_</a>;
<a name="l00056"></a>00056 };
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">/***************** Start of Implementation Section ******************/</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062         
<a name="l00063"></a>00063         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00064"></a><a class="code" href="classCoGaDB_1_1Column.htm#a44481f9232a50f794ec676d8673fbe1a">00064</a>         <a class="code" href="classCoGaDB_1_1Column.htm#a44481f9232a50f794ec676d8673fbe1a">Column&lt;T&gt;::Column</a>(<span class="keyword">const</span> std::string&amp; name, <a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> db_type) : <a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped</a>&lt;T&gt;(name,db_type), type_tid_comparator(), values_(){
<a name="l00065"></a>00065 
<a name="l00066"></a>00066         }
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="comment">//      template&lt;class T&gt;</span>
<a name="l00069"></a>00069 <span class="comment">//      Column&lt;T&gt;::Column(const Column&amp; column) : this-&gt;db_type_(column-&gt;db_type_), this-&gt;values_(column-&gt;values_){</span>
<a name="l00070"></a>00070 <span class="comment">//              </span>
<a name="l00071"></a>00071 <span class="comment">//      }</span>
<a name="l00072"></a>00072 
<a name="l00073"></a>00073         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00074"></a><a class="code" href="classCoGaDB_1_1Column.htm#a621aebd6e1e773434faf88d9f3374efd">00074</a>         <a class="code" href="classCoGaDB_1_1Column.htm#a621aebd6e1e773434faf88d9f3374efd">Column&lt;T&gt;::~Column</a>(){
<a name="l00075"></a>00075 
<a name="l00076"></a>00076         }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00079"></a><a class="code" href="classCoGaDB_1_1Column.htm#a1beb62451a2b27cfa0b5317d3e94ca5f">00079</a>         std::vector&lt;T&gt;&amp; <a class="code" href="classCoGaDB_1_1Column.htm#a1beb62451a2b27cfa0b5317d3e94ca5f">Column&lt;T&gt;::getContent</a>(){
<a name="l00080"></a>00080                 <span class="keywordflow">return</span> values_;
<a name="l00081"></a>00081         }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 
<a name="l00084"></a>00084         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00085"></a><a class="code" href="classCoGaDB_1_1Column.htm#aafa4cce4bb58a90461aaebba304b57f7">00085</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#aafa4cce4bb58a90461aaebba304b57f7" title="appends a value new_Value to end of column">Column&lt;T&gt;::insert</a>(<span class="keyword">const</span> boost::any&amp; new_value){
<a name="l00086"></a>00086                 <span class="keywordflow">if</span>(new_value.empty()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00087"></a>00087                 <span class="keywordflow">if</span>(<span class="keyword">typeid</span>(T)==new_value.type()){
<a name="l00088"></a>00088                          T value = boost::any_cast&lt;T&gt;(new_value);
<a name="l00089"></a>00089                          values_.push_back(value);
<a name="l00090"></a>00090                          <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00091"></a>00091                 }
<a name="l00092"></a>00092                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00093"></a>00093         }
<a name="l00094"></a>00094 
<a name="l00095"></a>00095         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00096"></a><a class="code" href="classCoGaDB_1_1Column.htm#abf710fd5fe45e15265cdcb0c4b3525cd">00096</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#aafa4cce4bb58a90461aaebba304b57f7" title="appends a value new_Value to end of column">Column&lt;T&gt;::insert</a>(<span class="keyword">const</span> T&amp; new_value){
<a name="l00097"></a>00097                 values_.push_back(new_value);
<a name="l00098"></a>00098                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00099"></a>00099         }
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 
<a name="l00102"></a>00102         <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; 
<a name="l00103"></a>00103         <span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIterator&gt;
<a name="l00104"></a><a class="code" href="classCoGaDB_1_1Column.htm#a4a26ab2a3a184a02380eb936e98be675">00104</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#aafa4cce4bb58a90461aaebba304b57f7" title="appends a value new_Value to end of column">Column&lt;T&gt;::insert</a>(InputIterator first, InputIterator last){
<a name="l00105"></a>00105                 this-&gt;values_.insert(this-&gt;values_.end(),first,last);
<a name="l00106"></a>00106                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00107"></a>00107         }
<a name="l00108"></a>00108 
<a name="l00109"></a>00109         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00110"></a><a class="code" href="classCoGaDB_1_1Column.htm#a1a1287868c72d0b787e67823ca03bd6e">00110</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a1a1287868c72d0b787e67823ca03bd6e" title="updates the value on position tid with a value new_Value">Column&lt;T&gt;::update</a>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid, <span class="keyword">const</span> boost::any&amp; new_value){
<a name="l00111"></a>00111                 <span class="keywordflow">if</span>(new_value.empty()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00112"></a>00112                 <span class="keywordflow">if</span>(<span class="keyword">typeid</span>(T)==new_value.type()){
<a name="l00113"></a>00113                          T value = boost::any_cast&lt;T&gt;(new_value);
<a name="l00114"></a>00114                          values_[tid]=value;
<a name="l00115"></a>00115                          <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00116"></a>00116                 }<span class="keywordflow">else</span>{
<a name="l00117"></a>00117                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error!!! Typemismatch for column &quot;</span> &lt;&lt; this-&gt;name_ &lt;&lt; std::endl; 
<a name="l00118"></a>00118                 }
<a name="l00119"></a>00119                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00120"></a>00120         }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00123"></a><a class="code" href="classCoGaDB_1_1Column.htm#afcb097510382eea5d11d5b2bc949daa5">00123</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a1a1287868c72d0b787e67823ca03bd6e" title="updates the value on position tid with a value new_Value">Column&lt;T&gt;::update</a>(<a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> tids, <span class="keyword">const</span> boost::any&amp; new_value){
<a name="l00124"></a>00124                 <span class="keywordflow">if</span>(!tids)
<a name="l00125"></a>00125                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00126"></a>00126         <span class="keywordflow">if</span>(new_value.empty()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00127"></a>00127                 <span class="keywordflow">if</span>(<span class="keyword">typeid</span>(T)==new_value.type()){
<a name="l00128"></a>00128                          T value = boost::any_cast&lt;T&gt;(new_value);
<a name="l00129"></a>00129                          <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;tids-&gt;size();i++){
<a name="l00130"></a>00130                                 <a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid=(*tids)[i];
<a name="l00131"></a>00131                                 values_[tid]=value;
<a name="l00132"></a>00132                          }
<a name="l00133"></a>00133                          <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00134"></a>00134                 }<span class="keywordflow">else</span>{
<a name="l00135"></a>00135                         std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error!!! Typemismatch for column &quot;</span> &lt;&lt; this-&gt;name_ &lt;&lt; std::endl; 
<a name="l00136"></a>00136                 }
<a name="l00137"></a>00137                 <span class="keywordflow">return</span> <span class="keyword">false</span>;           
<a name="l00138"></a>00138         }
<a name="l00139"></a>00139         
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 
<a name="l00143"></a>00143         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00144"></a><a class="code" href="classCoGaDB_1_1Column.htm#a53be8eb250bb6a1558ee310287b607ac">00144</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a53be8eb250bb6a1558ee310287b607ac" title="deletes the value on position tid">Column&lt;T&gt;::remove</a>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid){
<a name="l00145"></a>00145                 values_.erase(values_.begin()+tid);
<a name="l00146"></a>00146                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00147"></a>00147         }
<a name="l00148"></a>00148         
<a name="l00149"></a>00149         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00150"></a><a class="code" href="classCoGaDB_1_1Column.htm#ad4f7e740fcc1637c87219b60d31f1a05">00150</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a53be8eb250bb6a1558ee310287b607ac" title="deletes the value on position tid">Column&lt;T&gt;::remove</a>(<a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> tids){
<a name="l00151"></a>00151                 <span class="keywordflow">if</span>(!tids)
<a name="l00152"></a>00152                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00153"></a>00153                 <span class="comment">//test whether tid list has at least one element, if not, return with error</span>
<a name="l00154"></a>00154                 <span class="keywordflow">if</span>(tids-&gt;empty())
<a name="l00155"></a>00155                         <span class="keywordflow">return</span> <span class="keyword">false</span>;           
<a name="l00156"></a>00156 
<a name="l00157"></a>00157                 <span class="comment">//assert();</span>
<a name="l00158"></a>00158 
<a name="l00159"></a>00159                 <span class="keyword">typename</span> PositionList::reverse_iterator rit;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161                 <span class="keywordflow">for</span> (rit = tids-&gt;rbegin(); rit!=tids-&gt;rend(); ++rit)
<a name="l00162"></a>00162                         values_.erase(values_.begin()+(*rit));
<a name="l00163"></a>00163 
<a name="l00164"></a>00164                 <span class="comment">/*</span>
<a name="l00165"></a>00165 <span class="comment">                //delete tuples in reverse order, otherwise the first deletion would invalidate all other tids</span>
<a name="l00166"></a>00166 <span class="comment">                unsigned int i=tids-&gt;size()-1;</span>
<a name="l00167"></a>00167 <span class="comment">                while(true)     </span>
<a name="l00168"></a>00168 <span class="comment">                        TID = (*tids)[i];</span>
<a name="l00169"></a>00169 <span class="comment">                        values_.erase(values_.begin()+tid);             </span>
<a name="l00170"></a>00170 <span class="comment">                        if(i==0) break;</span>
<a name="l00171"></a>00171 <span class="comment">                }*/</span>
<a name="l00172"></a>00172                 
<a name="l00173"></a>00173                 
<a name="l00174"></a>00174                 <span class="keywordflow">return</span> <span class="keyword">true</span>;                    
<a name="l00175"></a>00175         }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00178"></a><a class="code" href="classCoGaDB_1_1Column.htm#a26e3afbca849e28e17986c08a8720132">00178</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a26e3afbca849e28e17986c08a8720132" title="deletes all values stored in the column">Column&lt;T&gt;::clearContent</a>(){
<a name="l00179"></a>00179                 values_.clear();
<a name="l00180"></a>00180                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00181"></a>00181         }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00184"></a><a class="code" href="classCoGaDB_1_1Column.htm#abb73422160b0559ec5cdfa4a87389b64">00184</a>         <span class="keyword">const</span> boost::any <a class="code" href="classCoGaDB_1_1Column.htm#abb73422160b0559ec5cdfa4a87389b64" title="generic function for fetching a value form a column (slow)">Column&lt;T&gt;::get</a>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid){
<a name="l00185"></a>00185                 <span class="keywordflow">if</span>(tid&lt;values_.size())
<a name="l00186"></a>00186                         <span class="keywordflow">return</span> boost::any(values_[tid]);
<a name="l00187"></a>00187                 <span class="keywordflow">else</span>{
<a name="l00188"></a>00188                         std::cout &lt;&lt; <span class="stringliteral">&quot;fatal Error!!! Invalid TID!!! Attribute: &quot;</span> &lt;&lt; this-&gt;name_ &lt;&lt; <span class="stringliteral">&quot; TID: &quot;</span> &lt;&lt; tid  &lt;&lt; std::endl;
<a name="l00189"></a>00189                 }
<a name="l00190"></a>00190                 <span class="keywordflow">return</span> boost::any();
<a name="l00191"></a>00191         }
<a name="l00192"></a>00192 
<a name="l00193"></a>00193         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00194"></a><a class="code" href="classCoGaDB_1_1Column.htm#aca3e004b9b02372235311f16c79a2bcb">00194</a>         <span class="keywordtype">void</span> <a class="code" href="classCoGaDB_1_1Column.htm#aca3e004b9b02372235311f16c79a2bcb" title="prints the content of a column">Column&lt;T&gt;::print</a>() <span class="keyword">const</span> throw(){
<a name="l00195"></a>00195                 std::cout &lt;&lt; <span class="stringliteral">&quot;| &quot;</span> &lt;&lt; this-&gt;name_ &lt;&lt; <span class="stringliteral">&quot; |&quot;</span> &lt;&lt; std::endl;
<a name="l00196"></a>00196                 std::cout &lt;&lt; <span class="stringliteral">&quot;________________________&quot;</span> &lt;&lt; std::endl;
<a name="l00197"></a>00197                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;values_.size();i++){
<a name="l00198"></a>00198                         std::cout &lt;&lt; <span class="stringliteral">&quot;| &quot;</span> &lt;&lt; values_[i] &lt;&lt; <span class="stringliteral">&quot; |&quot;</span> &lt;&lt; std::endl;
<a name="l00199"></a>00199                 }
<a name="l00200"></a>00200         }
<a name="l00201"></a>00201         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00202"></a><a class="code" href="classCoGaDB_1_1Column.htm#a4dab93f9e3b6383acd1959c9a0495fff">00202</a>         <span class="keywordtype">size_t</span> <a class="code" href="classCoGaDB_1_1Column.htm#a4dab93f9e3b6383acd1959c9a0495fff" title="returns the number of values (rows) in a column">Column&lt;T&gt;::size</a>() <span class="keyword">const</span> throw(){
<a name="l00203"></a>00203                 <span class="keywordflow">return</span> values_.size();
<a name="l00204"></a>00204         }
<a name="l00205"></a>00205         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00206"></a><a class="code" href="classCoGaDB_1_1Column.htm#a83eb97a5171c978cf67592bb0fd55f5a">00206</a>         <span class="keyword">const</span> <a class="code" href="classCoGaDB_1_1ColumnBase.htm#ae8d2ac257af16e7d8bc78e1ea43cb14d" title="defines a smart pointer to a ColumnBase Object">ColumnPtr</a> <a class="code" href="classCoGaDB_1_1Column.htm#a83eb97a5171c978cf67592bb0fd55f5a" title="virtual copy constructor">Column&lt;T&gt;::copy</a>()<span class="keyword"> const</span>{
<a name="l00207"></a>00207                 <span class="keywordflow">return</span> <a class="code" href="namespaceCoGaDB.htm#a3d7ce6ae5ca4381f2b4f1db23f982c5d" title="makes a smart pointer to a ColumnBase Object visible in the namespace">ColumnPtr</a>(<span class="keyword">new</span> <a class="code" href="classCoGaDB_1_1Column.htm">Column&lt;T&gt;</a>(*<span class="keyword">this</span>));
<a name="l00208"></a>00208         }
<a name="l00209"></a>00209         <span class="comment">/***************** relational operations on Columns which return lookup tables *****************/</span>
<a name="l00210"></a>00210 <span class="comment">//      template&lt;class T&gt;</span>
<a name="l00211"></a>00211 <span class="comment">//      const std::vector&lt;TID&gt; Column&lt;T&gt;::sort(const ComputeDevice comp_dev) const {</span>
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 <span class="comment">//              return std::vector&lt;TID&gt;();</span>
<a name="l00214"></a>00214 <span class="comment">//      }</span>
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 <span class="comment">//      template&lt;class T&gt; </span>
<a name="l00217"></a>00217 <span class="comment">//      const std::vector&lt;TID&gt; Column&lt;T&gt;::selection(const boost::any&amp; value_for_comparison, const ValueComparator comp, const ComputeDevice comp_dev) const {</span>
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 <span class="comment">//              return std::vector&lt;TID&gt;();</span>
<a name="l00220"></a>00220 <span class="comment">//      }</span>
<a name="l00221"></a>00221 <span class="comment">//      //join algorithms</span>
<a name="l00222"></a>00222 <span class="comment">//      template&lt;class T&gt;</span>
<a name="l00223"></a>00223 <span class="comment">//      const std::vector&lt;TID_Pair&gt; Column&lt;T&gt;::sort_merge_join(ColumnPtr join_Column, const ComputeDevice comp_dev) const{</span>
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 <span class="comment">//              return std::vector&lt;TID_Pair&gt;();</span>
<a name="l00226"></a>00226 <span class="comment">//      }</span>
<a name="l00227"></a>00227 <span class="comment">//      template&lt;class T&gt;</span>
<a name="l00228"></a>00228 <span class="comment">//      const std::vector&lt;TID_Pair&gt; Column&lt;T&gt;::nested_loop_join(ColumnPtr join_Column, const ComputeDevice comp_dev) const{</span>
<a name="l00229"></a>00229 
<a name="l00230"></a>00230 <span class="comment">//              return std::vector&lt;TID_Pair&gt;();</span>
<a name="l00231"></a>00231 <span class="comment">//      }</span>
<a name="l00232"></a>00232         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00233"></a><a class="code" href="classCoGaDB_1_1Column.htm#a24bd8a3baf1d5a5b7cdeabaafcfc945b">00233</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a24bd8a3baf1d5a5b7cdeabaafcfc945b" title="store a column on the disc">Column&lt;T&gt;::store</a>(<span class="keyword">const</span> std::string&amp; path_){
<a name="l00234"></a>00234                 <span class="comment">//string path(&quot;data/&quot;);</span>
<a name="l00235"></a>00235                 std::string path(path_);
<a name="l00236"></a>00236                 path += <span class="stringliteral">&quot;/&quot;</span>;
<a name="l00237"></a>00237                 path += this-&gt;name_;
<a name="l00238"></a>00238                 <span class="comment">//std::cout &lt;&lt; &quot;Writing Column &quot; &lt;&lt; this-&gt;getName() &lt;&lt; &quot; to File &quot; &lt;&lt; path &lt;&lt; std::endl;</span>
<a name="l00239"></a>00239                 std::ofstream outfile (path.c_str(),std::ios_base::binary | std::ios_base::out);
<a name="l00240"></a>00240                 boost::archive::binary_oarchive oa(outfile);
<a name="l00241"></a>00241 
<a name="l00242"></a>00242                 oa &lt;&lt; values_;
<a name="l00243"></a>00243 
<a name="l00244"></a>00244                 outfile.flush();
<a name="l00245"></a>00245                 outfile.close();
<a name="l00246"></a>00246                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00247"></a>00247         }
<a name="l00248"></a>00248         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00249"></a><a class="code" href="classCoGaDB_1_1Column.htm#a422928275ea027a5ea67cdc767d3add2">00249</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a422928275ea027a5ea67cdc767d3add2" title="load column from disc">Column&lt;T&gt;::load</a>(<span class="keyword">const</span> std::string&amp; path_){
<a name="l00250"></a>00250                 std::string path(path_);
<a name="l00251"></a>00251                 <span class="comment">//std::cout &lt;&lt; &quot;Loading column &#39;&quot; &lt;&lt; this-&gt;name_ &lt;&lt; &quot;&#39; from path &#39;&quot; &lt;&lt; path &lt;&lt; &quot;&#39;...&quot; &lt;&lt; std::endl;</span>
<a name="l00252"></a>00252                 <span class="comment">//string path(&quot;data/&quot;);</span>
<a name="l00253"></a>00253                 path += <span class="stringliteral">&quot;/&quot;</span>;
<a name="l00254"></a>00254                 path += this-&gt;name_;
<a name="l00255"></a>00255                 
<a name="l00256"></a>00256                 <span class="comment">//std::cout &lt;&lt; &quot;Opening File &#39;&quot; &lt;&lt; path &lt;&lt; &quot;&#39;...&quot; &lt;&lt; std::endl;</span>
<a name="l00257"></a>00257                 std::ifstream infile (path.c_str(),std::ios_base::binary | std::ios_base::in);
<a name="l00258"></a>00258                 boost::archive::binary_iarchive ia(infile);
<a name="l00259"></a>00259                 ia &gt;&gt; values_;
<a name="l00260"></a>00260                 infile.close();
<a name="l00261"></a>00261 
<a name="l00262"></a>00262 
<a name="l00263"></a>00263                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00264"></a>00264         }
<a name="l00265"></a>00265         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00266"></a><a class="code" href="classCoGaDB_1_1Column.htm#a89cf6f9a5748168bcf1bd60e52b4c67e">00266</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a89cf6f9a5748168bcf1bd60e52b4c67e" title="use this method to determine whether the column is materialized or a Lookup Column">Column&lt;T&gt;::isMaterialized</a>() <span class="keyword">const</span>  throw(){
<a name="l00267"></a>00267                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00268"></a>00268         }
<a name="l00269"></a>00269         
<a name="l00270"></a>00270         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00271"></a><a class="code" href="classCoGaDB_1_1Column.htm#a8ba3e2a3c8bd3e320d059146b0244555">00271</a>         <span class="keywordtype">bool</span> <a class="code" href="classCoGaDB_1_1Column.htm#a8ba3e2a3c8bd3e320d059146b0244555" title="use this method to determine whether the column is materialized or a Lookup Column">Column&lt;T&gt;::isCompressed</a>() <span class="keyword">const</span>  throw(){
<a name="l00272"></a>00272                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00273"></a>00273         }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00276"></a><a class="code" href="classCoGaDB_1_1Column.htm#ab676d44267ae7fb54068f14bd6a26104">00276</a>         T&amp; <a class="code" href="classCoGaDB_1_1Column.htm#ab676d44267ae7fb54068f14bd6a26104" title="defines operator[] for this class, which enables the user to thread all typed columns as arrays...">Column&lt;T&gt;::operator[]</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> index){
<a name="l00277"></a>00277                 
<a name="l00278"></a>00278                 <span class="keywordflow">return</span> values_[index];
<a name="l00279"></a>00279         }
<a name="l00280"></a>00280 
<a name="l00281"></a>00281         <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<a name="l00282"></a><a class="code" href="classCoGaDB_1_1Column.htm#accbee2285b9d47518547c5383a080552">00282</a>         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classCoGaDB_1_1Column.htm#accbee2285b9d47518547c5383a080552" title="returns the size in bytes the column consumes in main memory">Column&lt;T&gt;::getSizeinBytes</a>() <span class="keyword">const</span> throw(){
<a name="l00283"></a>00283                         <span class="keywordflow">return</span> values_.capacity()*<span class="keyword">sizeof</span>(T);
<a name="l00284"></a>00284         }
<a name="l00285"></a>00285 
<a name="l00286"></a>00286         <span class="comment">//total template specialization</span>
<a name="l00287"></a>00287         <span class="keyword">template</span>&lt;&gt;
<a name="l00288"></a><a class="code" href="classCoGaDB_1_1Column.htm#abc0fc654372f9145d96e42e058e64b54">00288</a>         <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classCoGaDB_1_1Column.htm#accbee2285b9d47518547c5383a080552" title="returns the size in bytes the column consumes in main memory">Column&lt;std::string&gt;::getSizeinBytes</a>() <span class="keyword">const</span> throw(){
<a name="l00289"></a>00289                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size_in_bytes=0;
<a name="l00290"></a>00290                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;values_.size();++i){
<a name="l00291"></a>00291                         size_in_bytes+=values_[i].capacity();
<a name="l00292"></a>00292                 }
<a name="l00293"></a>00293                 <span class="comment">//return values_.size()*sizeof(T);</span>
<a name="l00294"></a>00294                 <span class="keywordflow">return</span> size_in_bytes;
<a name="l00295"></a>00295         }
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 <span class="comment">/***************** End of Implementation Section ******************/</span>
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 
<a name="l00301"></a>00301 
<a name="l00302"></a>00302 }; <span class="comment">//end namespace CogaDB</span>
<a name="l00303"></a>00303 
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Tue Apr 30 2013 14:01:03 for Database Implementation Techniques Programming Task SoSe2013 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
