<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>Database Implementation Techniques Programming Task SoSe2013: main.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">Database Implementation Techniques Programming Task SoSe2013
   
   </div>
   <div id="projectbrief">DB2 Programming Task SoSe2013</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">main.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="main_8cpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00002"></a>00002 <span class="preprocessor">#include &lt;<a class="code" href="global__definitions_8hpp.htm">core/global_definitions.hpp</a>&gt;</span>
<a name="l00003"></a>00003 <span class="preprocessor">#include &lt;<a class="code" href="base__column_8hpp.htm">core/base_column.hpp</a>&gt;</span>
<a name="l00004"></a>00004 <span class="preprocessor">#include &lt;<a class="code" href="column__base__typed_8hpp.htm">core/column_base_typed.hpp</a>&gt;</span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;<a class="code" href="column_8hpp.htm">core/column.hpp</a>&gt;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;<a class="code" href="compressed__column_8hpp.htm">core/compressed_column.hpp</a>&gt;</span>
<a name="l00007"></a>00007 
<a name="l00008"></a>00008 <span class="comment">/*this is the include for the example compressed column with empty implementation*/</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;<a class="code" href="dictionary__compressed__column_8hpp.htm">compression/dictionary_compressed_column.hpp</a>&gt;</span>
<a name="l00010"></a>00010 
<a name="l00011"></a>00011 <span class="keyword">using namespace </span>CoGaDB;
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 <span class="keywordtype">bool</span> <a class="code" href="main_8cpp.htm#a7fc104b1e4c91f5fbd065c0fc53d2291">unittest</a>(boost::shared_ptr&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;int&gt;</a> &gt; ptr);
<a name="l00014"></a>00014 <span class="keywordtype">bool</span> <a class="code" href="main_8cpp.htm#a7fc104b1e4c91f5fbd065c0fc53d2291">unittest</a>(boost::shared_ptr&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;float&gt;</a> &gt; ptr);
<a name="l00015"></a>00015 <span class="comment">//bool unittest(boost::shared_ptr&lt;ColumnBaseTyped&lt;double&gt; &gt; ptr);</span>
<a name="l00016"></a>00016 <span class="keywordtype">bool</span> <a class="code" href="main_8cpp.htm#a7fc104b1e4c91f5fbd065c0fc53d2291">unittest</a>(boost::shared_ptr&lt;<a class="code" href="classCoGaDB_1_1ColumnBaseTyped.htm" title="This class represents a column with type T, is the base class for all typed column classes and allows...">ColumnBaseTyped&lt;std::string&gt;</a> &gt; ptr);
<a name="l00017"></a>00017 
<a name="l00018"></a><a class="code" href="main_8cpp.htm#ae66f6b31b5ad750f1fe042a706a4e3d4">00018</a> <span class="keywordtype">int</span> <a class="code" href="main_8cpp.htm#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(){
<a name="l00019"></a>00019         <span class="comment">/*create an object of your implemented column, and pass the smart pointer to the unittests*/</span>
<a name="l00020"></a>00020    boost::shared_ptr&lt;Column&lt;int&gt; &gt; col (<span class="keyword">new</span> <a class="code" href="classCoGaDB_1_1Column.htm">Column&lt;int&gt;</a>(<span class="stringliteral">&quot;int column&quot;</span>,<a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5af2a0adc19f7cdd52368e82a26e8c1e48">INT</a>));
<a name="l00021"></a>00021         <span class="keywordflow">if</span>(!<a class="code" href="main_8cpp.htm#a7fc104b1e4c91f5fbd065c0fc53d2291">unittest</a>(col)){
<a name="l00022"></a>00022                 std::cout &lt;&lt; <span class="stringliteral">&quot;At least one Unittest Failed!&quot;</span> &lt;&lt; std::endl;      
<a name="l00023"></a>00023                 <span class="keywordflow">return</span> -1;      
<a name="l00024"></a>00024         }
<a name="l00025"></a>00025         std::cout &lt;&lt; <span class="stringliteral">&quot;Unitests Passed!&quot;</span> &lt;&lt; std::endl;
<a name="l00026"></a>00026 
<a name="l00027"></a>00027    boost::shared_ptr&lt;Column&lt;float&gt; &gt; col_float (<span class="keyword">new</span> <a class="code" href="classCoGaDB_1_1Column.htm">Column&lt;float&gt;</a>(<span class="stringliteral">&quot;float column&quot;</span>,<a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5a9fdb653463f9452e019074a0eeacf3b9">FLOAT</a>));
<a name="l00028"></a>00028         <span class="keywordflow">if</span>(!<a class="code" href="main_8cpp.htm#a7fc104b1e4c91f5fbd065c0fc53d2291">unittest</a>(col_float)){
<a name="l00029"></a>00029                 std::cout &lt;&lt; <span class="stringliteral">&quot;At least one Unittest Failed!&quot;</span> &lt;&lt; std::endl;      
<a name="l00030"></a>00030                 <span class="keywordflow">return</span> -1;      
<a name="l00031"></a>00031         }
<a name="l00032"></a>00032         std::cout &lt;&lt; <span class="stringliteral">&quot;Unitests Passed!&quot;</span> &lt;&lt; std::endl;
<a name="l00033"></a>00033 
<a name="l00034"></a>00034    boost::shared_ptr&lt;Column&lt;std::string&gt; &gt; col_string (<span class="keyword">new</span> <a class="code" href="classCoGaDB_1_1Column.htm">Column&lt;std::string&gt;</a>(<span class="stringliteral">&quot;string column&quot;</span>,<a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5aa69b8f96a2564281efcf85c3e3d2d65f">VARCHAR</a>));
<a name="l00035"></a>00035         <span class="comment">//boost::shared_ptr&lt;DictionaryCompressedColumn&lt;std::string&gt; &gt; col (new DictionaryCompressedColumn&lt;std::string&gt;(&quot;compressed int column&quot;,VARCHAR));</span>
<a name="l00036"></a>00036         <span class="keywordflow">if</span>(!<a class="code" href="main_8cpp.htm#a7fc104b1e4c91f5fbd065c0fc53d2291">unittest</a>(col_string)){
<a name="l00037"></a>00037                 std::cout &lt;&lt; <span class="stringliteral">&quot;At least one Unittest Failed!&quot;</span> &lt;&lt; std::endl;      
<a name="l00038"></a>00038                 <span class="keywordflow">return</span> -1;      
<a name="l00039"></a>00039         }
<a name="l00040"></a>00040         std::cout &lt;&lt; <span class="stringliteral">&quot;Unitests Passed!&quot;</span> &lt;&lt; std::endl;
<a name="l00041"></a>00041 
<a name="l00042"></a>00042         
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">//      /****** BULK UPDATE TEST ******/</span>
<a name="l00045"></a>00045 <span class="comment">//      {</span>
<a name="l00046"></a>00046 <span class="comment">//              std::cout &lt;&lt; &quot;BULK UPDATE TEST...&quot;; // &lt;&lt; std::endl;</span>
<a name="l00047"></a>00047 <span class="comment">//              boost::shared_ptr&lt;Column&lt;int&gt; &gt; uncompressed_col (new Column&lt;int&gt;(&quot;int column&quot;,INT));</span>
<a name="l00048"></a>00048 <span class="comment">//              boost::shared_ptr&lt;Column&lt;int&gt; &gt; compressed_col (new Column&lt;int&gt;(&quot;int column&quot;,INT));</span>
<a name="l00049"></a>00049 <span class="comment">//              //boost::shared_ptr&lt;DictionaryCompressedColumn&lt;int&gt; &gt; compressed_col (new DictionaryCompressedColumn&lt;int&gt;(&quot;compressed int column&quot;,INT));</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="comment">//              uncompressed_col-&gt;insert(reference_data.begin(),reference_data.end()); </span>
<a name="l00053"></a>00053 <span class="comment">//              compressed_col-&gt;insert(reference_data.begin(),reference_data.end()); </span>
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="comment">//              bool result = *(boost::static_pointer_cast&lt;ColumnBaseTyped&lt;int&gt; &gt;(uncompressed_col))==*(boost::static_pointer_cast&lt;ColumnBaseTyped&lt;int&gt; &gt;(compressed_col));</span>
<a name="l00056"></a>00056 <span class="comment">//              if(!result){ </span>
<a name="l00057"></a>00057 <span class="comment">//                      std::cerr &lt;&lt; std::endl &lt;&lt; &quot;operator== TEST FAILED!&quot; &lt;&lt; std::endl;       </span>
<a name="l00058"></a>00058 <span class="comment">//                      return false;</span>
<a name="l00059"></a>00059 <span class="comment">//              }</span>
<a name="l00060"></a>00060 <span class="comment">//              PositionListPtr tids (new PositionList());</span>
<a name="l00061"></a>00061 <span class="comment">//              int new_value=rand()%100;</span>
<a name="l00062"></a>00062 <span class="comment">//         for(unsigned int i=0;i&lt;10;i++){</span>
<a name="l00063"></a>00063 <span class="comment">//                      tids-&gt;push_back(rand()%uncompressed_col-&gt;size());</span>
<a name="l00064"></a>00064 <span class="comment">//         }</span>
<a name="l00065"></a>00065 <span class="comment">//              </span>
<a name="l00066"></a>00066 <span class="comment">//              uncompressed_col-&gt;update(tids,new_value); </span>
<a name="l00067"></a>00067 <span class="comment">//              compressed_col-&gt;update(tids,new_value); </span>
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="comment">//              result = *(boost::static_pointer_cast&lt;ColumnBaseTyped&lt;int&gt; &gt;(uncompressed_col))==*(boost::static_pointer_cast&lt;ColumnBaseTyped&lt;int&gt; &gt;(compressed_col));</span>
<a name="l00070"></a>00070 <span class="comment">//              if(!result){</span>
<a name="l00071"></a>00071 <span class="comment">//                       std::cerr &lt;&lt; std::endl &lt;&lt; &quot;BULK UPDATE TEST FAILED!&quot; &lt;&lt; std::endl;     </span>
<a name="l00072"></a>00072 <span class="comment">//                       return false;  </span>
<a name="l00073"></a>00073 <span class="comment">//              }</span>
<a name="l00074"></a>00074 <span class="comment">//              std::cout &lt;&lt; &quot;SUCCESS&quot;&lt;&lt; std::endl;     </span>
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="comment">//      }</span>
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="comment">//      /****** BULK DELETE TEST ******/</span>
<a name="l00079"></a>00079 <span class="comment">//      {</span>
<a name="l00080"></a>00080 <span class="comment">//              std::cout &lt;&lt; &quot;BULK DELETE TEST...&quot;; // &lt;&lt; std::endl;</span>
<a name="l00081"></a>00081 <span class="comment">//              boost::shared_ptr&lt;Column&lt;int&gt; &gt; uncompressed_col (new Column&lt;int&gt;(&quot;int column&quot;,INT));</span>
<a name="l00082"></a>00082 <span class="comment">//              boost::shared_ptr&lt;Column&lt;int&gt; &gt; compressed_col (new Column&lt;int&gt;(&quot;int column&quot;,INT));</span>
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="comment">//              //boost::shared_ptr&lt;DictionaryCompressedColumn&lt;int&gt; &gt; compressed_col (new DictionaryCompressedColumn&lt;int&gt;(&quot;compressed int column&quot;,INT));</span>
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 <span class="comment">//              uncompressed_col-&gt;insert(reference_data.begin(),reference_data.end()); </span>
<a name="l00087"></a>00087 <span class="comment">//              compressed_col-&gt;insert(reference_data.begin(),reference_data.end()); </span>
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 <span class="comment">//              bool result = *(boost::static_pointer_cast&lt;ColumnBaseTyped&lt;int&gt; &gt;(uncompressed_col))==*(boost::static_pointer_cast&lt;ColumnBaseTyped&lt;int&gt; &gt;(compressed_col));</span>
<a name="l00090"></a>00090 <span class="comment">//              if(!result){ </span>
<a name="l00091"></a>00091 <span class="comment">//                      std::cerr &lt;&lt; std::endl &lt;&lt; &quot;operator== TEST FAILED!&quot; &lt;&lt; std::endl;       </span>
<a name="l00092"></a>00092 <span class="comment">//                      return false;</span>
<a name="l00093"></a>00093 <span class="comment">//              }</span>
<a name="l00094"></a>00094 
<a name="l00095"></a>00095 <span class="comment">//              PositionListPtr tids (new PositionList());</span>
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="comment">//         for(unsigned int i=0;i&lt;10;i++){</span>
<a name="l00098"></a>00098 <span class="comment">//                      tids-&gt;push_back(rand()%uncompressed_col-&gt;size());</span>
<a name="l00099"></a>00099 <span class="comment">//         }</span>
<a name="l00100"></a>00100 <span class="comment">//              </span>
<a name="l00101"></a>00101 <span class="comment">//              uncompressed_col-&gt;remove(tids); </span>
<a name="l00102"></a>00102 <span class="comment">//              compressed_col-&gt;remove(tids); </span>
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="comment">//              result = *(boost::static_pointer_cast&lt;ColumnBaseTyped&lt;int&gt; &gt;(uncompressed_col))==*(boost::static_pointer_cast&lt;ColumnBaseTyped&lt;int&gt; &gt;(compressed_col));</span>
<a name="l00105"></a>00105 <span class="comment">//              if(!result){</span>
<a name="l00106"></a>00106 <span class="comment">//                       std::cerr &lt;&lt; &quot;BULK DELETE TEST FAILED!&quot; &lt;&lt; std::endl;  </span>
<a name="l00107"></a>00107 <span class="comment">//                       return false;  </span>
<a name="l00108"></a>00108 <span class="comment">//              }</span>
<a name="l00109"></a>00109 <span class="comment">//              std::cout &lt;&lt; &quot;SUCCESS&quot;&lt;&lt; std::endl;     </span>
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 <span class="comment">//      }</span>
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00114"></a>00114  <span class="keywordflow">return</span> 0;
<a name="l00115"></a>00115 }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Tue Apr 30 2013 14:01:03 for Database Implementation Techniques Programming Task SoSe2013 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
